{"ast":null,"code":"import browserStreamToIt from 'browser-readablestream-to-it';\nimport errCode from 'err-code';\nimport map from 'it-map';\nimport itPeekable from 'it-peekable';\nimport { isBytes, isBlob, isReadableStream, isFileObject, parseMtime, parseMode } from './utils.js';\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function* normaliseCandidateMultiple(input, normaliseContent) {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState != null) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    // @ts-expect-error cannot detect iterability\n    const peekable = itPeekable(input);\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    const {\n      value,\n      done\n    } = await peekable.peek();\n    if (done === true) {\n      // make sure empty iterators result in empty files\n      yield* [];\n      return;\n    }\n    peekable.push(value);\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n    }\n    // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n    if (value._readableState != null) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield* map(peekable, async value => toFileObject({\n        content: value\n      }, normaliseContent));\n      return;\n    }\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({\n        content: peekable\n      }, normaliseContent);\n      return;\n    }\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield* map(peekable, async value => toFileObject(value, normaliseContent));\n      return;\n    }\n  }\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n  const file = {\n    path: path ?? '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content != null) {\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(content);\n  } else if (path == null) {\n    // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}","map":{"version":3,"names":["browserStreamToIt","errCode","map","itPeekable","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateMultiple","input","normaliseContent","String","_readableState","Error","Symbol","iterator","asyncIterator","peekable","value","done","peek","push","Number","isInteger","toFileObject","content","path","mode","mtime","file"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/files/normalise-candidate-multiple.ts"],"sourcesContent":["import browserStreamToIt from 'browser-readablestream-to-it'\nimport errCode from 'err-code'\nimport map from 'it-map'\nimport itPeekable from 'it-peekable'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject,\n  parseMtime,\n  parseMode\n} from './utils.js'\nimport type { ImportCandidate, ImportCandidateStream, ToContent } from '../../index.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateMultiple (input: ImportCandidateStream, normaliseContent: (content: ToContent) => Promise<AsyncIterable<Uint8Array>>): AsyncGenerator<ImportCandidate, void, undefined> {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState != null) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    // @ts-expect-error cannot detect iterability\n    const peekable = itPeekable(input)\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    const { value, done } = await peekable.peek()\n\n    if (done === true) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n    }\n\n    // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n    if (value._readableState != null) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield * map(peekable, async value => toFileObject({ content: value }, normaliseContent))\n      return\n    }\n\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({ content: peekable }, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield * map(peekable, async value => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\nasync function toFileObject (input: ImportCandidate, normaliseContent: (content: ToContent) => Promise<AsyncIterable<Uint8Array>>): Promise<ImportCandidate> {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  const file: ImportCandidate = {\n    path: path ?? '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content != null) {\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(content)\n  } else if (path == null) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}