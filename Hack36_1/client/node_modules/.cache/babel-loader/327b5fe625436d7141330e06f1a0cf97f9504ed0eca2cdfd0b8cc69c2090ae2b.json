{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { normaliseInput } from '../lib/pins/normalise-input.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport function createRmAll(client) {\n  return async function* rmAll(source, options = {}) {\n    for await (const {\n      path,\n      recursive\n    } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', `${path}`);\n      if (recursive != null) searchParams.set('recursive', String(recursive));\n      const res = await client.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      });\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins != null) {\n          // non-streaming response\n          yield* pin.Pins.map(cid => CID.parse(cid));\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n        yield CID.parse(pin);\n      }\n    }\n  };\n}","map":{"version":3,"names":["CID","normaliseInput","toUrlSearchParams","createRmAll","client","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","res","post","signal","headers","arg","pin","ndjson","Pins","map","cid","parse"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/pin/rm-all.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { normaliseInput } from '../lib/pins/normalise-input.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport type { PinAPI } from './index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport function createRmAll (client: HTTPRPCClient): PinAPI['rmAll'] {\n  return async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await client.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins != null) { // non-streaming response\n          yield * pin.Pins.map((cid: string) => CID.parse(cid))\n          // eslint-disable-next-line no-continue\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,iBAAiB,QAAQ,gCAAgC;AAIlE,OAAM,SAAUC,WAAWA,CAAEC,MAAqB;EAChD,OAAO,gBAAiBC,KAAKA,CAAEC,MAAM,EAAEC,OAAO,GAAG,EAAE;IACjD,WAAW,MAAM;MAAEC,IAAI;MAAEC;IAAS,CAAE,IAAIR,cAAc,CAACK,MAAM,CAAC,EAAE;MAC9D,MAAMI,YAAY,GAAG,IAAIC,eAAe,CAACJ,OAAO,CAACG,YAAY,CAAC;MAC9DA,YAAY,CAACE,MAAM,CAAC,KAAK,EAAE,GAAGJ,IAAI,EAAE,CAAC;MAErC,IAAIC,SAAS,IAAI,IAAI,EAAEC,YAAY,CAACG,GAAG,CAAC,WAAW,EAAEC,MAAM,CAACL,SAAS,CAAC,CAAC;MAEvE,MAAMM,GAAG,GAAG,MAAMX,MAAM,CAACY,IAAI,CAAC,QAAQ,EAAE;QACtCC,MAAM,EAAEV,OAAO,CAACU,MAAM;QACtBC,OAAO,EAAEX,OAAO,CAACW,OAAO;QACxBR,YAAY,EAAER,iBAAiB,CAAC;UAC9B,GAAGK,OAAO;UACVY,GAAG,EAAE,GAAGX,IAAI,EAAE;UACdC;SACD;OACF,CAAC;MAEF,WAAW,MAAMW,GAAG,IAAIL,GAAG,CAACM,MAAM,EAAE,EAAE;QACpC,IAAID,GAAG,CAACE,IAAI,IAAI,IAAI,EAAE;UAAE;UACtB,OAAQF,GAAG,CAACE,IAAI,CAACC,GAAG,CAAEC,GAAW,IAAKxB,GAAG,CAACyB,KAAK,CAACD,GAAG,CAAC,CAAC;UACrD;UACA;QACF;QACA,MAAMxB,GAAG,CAACyB,KAAK,CAACL,GAAG,CAAC;MACtB;IACF;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}