{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * For when you need a one-liner to collect iterable values.\n *\n * @example\n *\n * ```javascript\n * import all from 'it-all'\n *\n * // This can also be an iterator, etc\n * const values = function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const arr = all(values)\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const arr = await all(values())\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\nfunction isAsyncIterable(thing) {\n  return thing[Symbol.asyncIterator] != null;\n}\nfunction all(source) {\n  if (isAsyncIterable(source)) {\n    return (async () => {\n      const arr = [];\n      for await (const entry of source) {\n        arr.push(entry);\n      }\n      return arr;\n    })();\n  }\n  const arr = [];\n  for (const entry of source) {\n    arr.push(entry);\n  }\n  return arr;\n}\nexport default all;","map":{"version":3,"names":["isAsyncIterable","thing","Symbol","asyncIterator","all","source","arr","entry","push"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/it-all/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * For when you need a one-liner to collect iterable values.\n *\n * @example\n *\n * ```javascript\n * import all from 'it-all'\n *\n * // This can also be an iterator, etc\n * const values = function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const arr = all(values)\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const arr = await all(values())\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Collects all values from an (async) iterable and returns them as an array\n */\nfunction all <T> (source: Iterable<T>): T[]\nfunction all <T> (source: Iterable<T> | AsyncIterable<T>): Promise<T[]>\nfunction all <T> (source: Iterable<T> | AsyncIterable<T>): Promise<T[]> | T[] {\n  if (isAsyncIterable(source)) {\n    return (async () => {\n      const arr = []\n\n      for await (const entry of source) {\n        arr.push(entry)\n      }\n\n      return arr\n    })()\n  }\n\n  const arr = []\n\n  for (const entry of source) {\n    arr.push(entry)\n  }\n\n  return arr\n}\n\nexport default all\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAASA,eAAeA,CAAMC,KAAU;EACtC,OAAOA,KAAK,CAACC,MAAM,CAACC,aAAa,CAAC,IAAI,IAAI;AAC5C;AAOA,SAASC,GAAGA,CAAMC,MAAsC;EACtD,IAAIL,eAAe,CAACK,MAAM,CAAC,EAAE;IAC3B,OAAO,CAAC,YAAW;MACjB,MAAMC,GAAG,GAAG,EAAE;MAEd,WAAW,MAAMC,KAAK,IAAIF,MAAM,EAAE;QAChCC,GAAG,CAACE,IAAI,CAACD,KAAK,CAAC;;MAGjB,OAAOD,GAAG;IACZ,CAAC,EAAC,CAAE;;EAGN,MAAMA,GAAG,GAAG,EAAE;EAEd,KAAK,MAAMC,KAAK,IAAIF,MAAM,EAAE;IAC1BC,GAAG,CAACE,IAAI,CAACD,KAAK,CAAC;;EAGjB,OAAOD,GAAG;AACZ;AAEA,eAAeF,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}