{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * A logger for libp2p based on the venerable [debug](https://www.npmjs.com/package/debug) module.\n *\n * @example\n *\n * ```TypeScript\n * import { logger } from '@libp2p/logger'\n *\n * const log = logger('libp2p:my:component:name')\n *\n * try {\n *   // an operation\n *   log('something happened: %s', 'it was ok')\n * } catch (err) {\n *   log.error('something bad happened: %o', err)\n * }\n *\n * log('with this peer: %p', {})\n * log('and this base58btc: %b', Uint8Array.from([0, 1, 2, 3]))\n * log('and this base32: %t', Uint8Array.from([4, 5, 6, 7]))\n * ```\n *\n * ```console\n * $ DEBUG=libp2p:* node index.js\n * something happened: it was ok\n * something bad happened: <stack trace>\n * with this peer: 12D3Foo\n * with this base58btc: Qmfoo\n * with this base32: bafyfoo\n * ```\n */\nimport debug from 'debug';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { base64 } from 'multiformats/bases/base64';\nimport { truncatePeerId } from './utils.js';\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = v => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v);\n};\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = v => {\n  return v == null ? 'undefined' : base32.baseEncode(v);\n};\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = v => {\n  return v == null ? 'undefined' : base64.baseEncode(v);\n};\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = v => {\n  return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = v => {\n  return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = v => {\n  return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying Multiaddrs\ndebug.formatters.a = v => {\n  return v == null ? 'undefined' : v.toString();\n};\nfunction createDisabledLogger(namespace) {\n  const logger = () => {};\n  logger.enabled = false;\n  logger.color = '';\n  logger.diff = 0;\n  logger.log = () => {};\n  logger.namespace = namespace;\n  logger.destroy = () => true;\n  logger.extend = () => logger;\n  return logger;\n}\n/**\n * Create a component logger that will prefix any log messages with a truncated\n * peer id.\n *\n * @example\n *\n * ```TypeScript\n * import { peerLogger } from '@libp2p/logger'\n * import { peerIdFromString } from '@libp2p/peer-id'\n *\n * const peerId = peerIdFromString('12D3FooBar')\n * const logger = peerLogger(peerId)\n *\n * const log = logger.forComponent('my-component')\n * log.info('hello world')\n * // logs \"12…oBar:my-component hello world\"\n * ```\n */\nexport function peerLogger(peerId, options = {}) {\n  return prefixLogger(truncatePeerId(peerId, options));\n}\n/**\n * Create a component logger that will prefix any log messages with the passed\n * string.\n *\n * @example\n *\n * ```TypeScript\n * import { prefixLogger } from '@libp2p/logger'\n *\n * const logger = prefixLogger('my-node')\n *\n * const log = logger.forComponent('my-component')\n * log.info('hello world')\n * // logs \"my-node:my-component hello world\"\n * ```\n */\nexport function prefixLogger(prefix) {\n  return {\n    forComponent(name) {\n      return logger(`${prefix}:${name}`);\n    }\n  };\n}\n/**\n * Create a component logger\n *\n * @example\n *\n * ```TypeScript\n * import { defaultLogger } from '@libp2p/logger'\n * import { peerIdFromString } from '@libp2p/peer-id'\n *\n * const logger = defaultLogger()\n *\n * const log = logger.forComponent('my-component')\n * log.info('hello world')\n * // logs \"my-component hello world\"\n * ```\n */\nexport function defaultLogger() {\n  return {\n    forComponent(name) {\n      return logger(name);\n    }\n  };\n}\n/**\n * Creates a logger for the passed component name.\n *\n * @example\n *\n * ```TypeScript\n * import { logger } from '@libp2p/logger'\n *\n * const log = logger('my-component')\n * log.info('hello world')\n * // logs \"my-component hello world\"\n * ```\n */\nexport function logger(name) {\n  // trace logging is a no-op by default\n  let trace = createDisabledLogger(`${name}:trace`);\n  // look at all the debug names and see if trace logging has explicitly been enabled\n  if (debug.enabled(`${name}:trace`) && debug.names.map(r => r.toString()).find(n => n.includes(':trace')) != null) {\n    trace = debug(`${name}:trace`);\n  }\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace\n  });\n}\nexport function disable() {\n  debug.disable();\n}\nexport function enable(namespaces) {\n  debug.enable(namespaces);\n}\nexport function enabled(namespaces) {\n  return debug.enabled(namespaces);\n}","map":{"version":3,"names":["debug","base32","base58btc","base64","truncatePeerId","formatters","b","v","baseEncode","t","m","p","toString","c","k","a","createDisabledLogger","namespace","logger","enabled","color","diff","log","destroy","extend","peerLogger","peerId","options","prefixLogger","prefix","forComponent","name","defaultLogger","trace","names","map","r","find","n","includes","Object","assign","error","disable","enable","namespaces"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/@libp2p/logger/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * A logger for libp2p based on the venerable [debug](https://www.npmjs.com/package/debug) module.\n *\n * @example\n *\n * ```TypeScript\n * import { logger } from '@libp2p/logger'\n *\n * const log = logger('libp2p:my:component:name')\n *\n * try {\n *   // an operation\n *   log('something happened: %s', 'it was ok')\n * } catch (err) {\n *   log.error('something bad happened: %o', err)\n * }\n *\n * log('with this peer: %p', {})\n * log('and this base58btc: %b', Uint8Array.from([0, 1, 2, 3]))\n * log('and this base32: %t', Uint8Array.from([4, 5, 6, 7]))\n * ```\n *\n * ```console\n * $ DEBUG=libp2p:* node index.js\n * something happened: it was ok\n * something bad happened: <stack trace>\n * with this peer: 12D3Foo\n * with this base58btc: Qmfoo\n * with this base32: bafyfoo\n * ```\n */\n\nimport debug from 'debug'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { base64 } from 'multiformats/bases/base64'\nimport { truncatePeerId } from './utils.js'\nimport type { PeerId } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Key } from 'interface-datastore'\nimport type { CID } from 'multiformats/cid'\n\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v)\n}\n\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base32.baseEncode(v)\n}\n\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base64.baseEncode(v)\n}\n\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = (v?: PeerId): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = (v?: CID): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = (v: Key): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Multiaddrs\ndebug.formatters.a = (v?: Multiaddr): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\nexport interface Logger {\n  (formatter: any, ...args: any[]): void\n  error(formatter: any, ...args: any[]): void\n  trace(formatter: any, ...args: any[]): void\n  enabled: boolean\n}\n\nexport interface ComponentLogger {\n  forComponent(name: string): Logger\n}\n\nfunction createDisabledLogger (namespace: string): debug.Debugger {\n  const logger = (): void => {}\n  logger.enabled = false\n  logger.color = ''\n  logger.diff = 0\n  logger.log = (): void => {}\n  logger.namespace = namespace\n  logger.destroy = () => true\n  logger.extend = () => logger\n\n  return logger\n}\n\nexport interface PeerLoggerOptions {\n  prefixLength: number\n  suffixLength: number\n}\n\n/**\n * Create a component logger that will prefix any log messages with a truncated\n * peer id.\n *\n * @example\n *\n * ```TypeScript\n * import { peerLogger } from '@libp2p/logger'\n * import { peerIdFromString } from '@libp2p/peer-id'\n *\n * const peerId = peerIdFromString('12D3FooBar')\n * const logger = peerLogger(peerId)\n *\n * const log = logger.forComponent('my-component')\n * log.info('hello world')\n * // logs \"12…oBar:my-component hello world\"\n * ```\n */\nexport function peerLogger (peerId: PeerId, options: Partial<PeerLoggerOptions> = {}): ComponentLogger {\n  return prefixLogger(truncatePeerId(peerId, options))\n}\n\n/**\n * Create a component logger that will prefix any log messages with the passed\n * string.\n *\n * @example\n *\n * ```TypeScript\n * import { prefixLogger } from '@libp2p/logger'\n *\n * const logger = prefixLogger('my-node')\n *\n * const log = logger.forComponent('my-component')\n * log.info('hello world')\n * // logs \"my-node:my-component hello world\"\n * ```\n */\nexport function prefixLogger (prefix: string): ComponentLogger {\n  return {\n    forComponent (name: string) {\n      return logger(`${prefix}:${name}`)\n    }\n  }\n}\n\n/**\n * Create a component logger\n *\n * @example\n *\n * ```TypeScript\n * import { defaultLogger } from '@libp2p/logger'\n * import { peerIdFromString } from '@libp2p/peer-id'\n *\n * const logger = defaultLogger()\n *\n * const log = logger.forComponent('my-component')\n * log.info('hello world')\n * // logs \"my-component hello world\"\n * ```\n */\nexport function defaultLogger (): ComponentLogger {\n  return {\n    forComponent (name: string) {\n      return logger(name)\n    }\n  }\n}\n\n/**\n * Creates a logger for the passed component name.\n *\n * @example\n *\n * ```TypeScript\n * import { logger } from '@libp2p/logger'\n *\n * const log = logger('my-component')\n * log.info('hello world')\n * // logs \"my-component hello world\"\n * ```\n */\nexport function logger (name: string): Logger {\n  // trace logging is a no-op by default\n  let trace: debug.Debugger = createDisabledLogger(`${name}:trace`)\n\n  // look at all the debug names and see if trace logging has explicitly been enabled\n  if (debug.enabled(`${name}:trace`) && debug.names.map(r => r.toString()).find(n => n.includes(':trace')) != null) {\n    trace = debug(`${name}:trace`)\n  }\n\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace\n  })\n}\n\nexport function disable (): void {\n  debug.disable()\n}\n\nexport function enable (namespaces: string): void {\n  debug.enable(namespaces)\n}\n\nexport function enabled (namespaces: string): boolean {\n  return debug.enabled(namespaces)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}