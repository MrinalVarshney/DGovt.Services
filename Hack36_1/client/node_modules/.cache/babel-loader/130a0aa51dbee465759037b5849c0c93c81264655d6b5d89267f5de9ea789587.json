{"ast":null,"code":"import { createGet } from './get.js';\nimport { createPut } from './put.js';\nimport { createRm } from './rm.js';\nimport { createStat } from './stat.js';\nexport function createBlock(client) {\n  return {\n    get: createGet(client),\n    put: createPut(client),\n    rm: createRm(client),\n    stat: createStat(client)\n  };\n}","map":{"version":3,"names":["createGet","createPut","createRm","createStat","createBlock","client","get","put","rm","stat"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/block/index.ts"],"sourcesContent":["import { createGet } from './get.js'\nimport { createPut } from './put.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\nimport type { HTTPRPCOptions } from '../index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\nimport type { CID, Version } from 'multiformats/cid'\n\nexport interface BlockPutOptions extends HTTPRPCOptions {\n  /**\n   * The codec to use to create the CID\n   */\n  format?: string\n\n  /**\n   * Multihash hashing algorithm to use. (Defaults to 'sha2-256')\n   */\n  mhtype?: string\n\n  /**\n   * The version to use to create the CID\n   */\n  version?: Version\n\n  /**\n   * Pin this block when adding. (Defaults to `false`)\n   */\n  pin?: boolean\n}\n\nexport interface BlockRmOptions extends HTTPRPCOptions {\n  /**\n   * Ignores non-existent blocks\n   */\n  force?: boolean\n\n  /**\n   * Do not return output if true\n   */\n  quiet?: boolean\n}\n\nexport interface BlockRmResult {\n  /**\n   * The CID of the removed block\n   */\n  cid: CID\n\n  /**\n   * Any error that occurred while trying to remove the block\n   */\n  error?: Error\n}\n\nexport interface BlockStatResult {\n  /**\n   * The CID of the block\n   */\n  cid: CID\n\n  /**\n   * The size of the block\n   */\n  size: number\n}\n\nexport interface BlockAPI {\n  /**\n   * Get a raw IPFS block\n   *\n   * @example\n   *\n   * ```js\n   * const block = await ipfs.block.get(cid)\n   * console.log(block)\n   * ```\n   */\n  get (cid: CID, options?: HTTPRPCOptions): Promise<Uint8Array>\n\n  /**\n   * Stores a Uint8Array as a block in the underlying blockstore\n   *\n   * @example\n   *\n   * ```js\n   * import * as dagPB from '@ipld/dag-pb'\n   * // Defaults\n   * const encoder = new TextEncoder()\n   * const decoder = new TextDecoder()\n   *\n   * const bytes = encoder.encode('a serialized object')\n   * const cid = await ipfs.block.put(bytes)\n   *\n   * console.log(decoder.decode(block.data))\n   * // Logs:\n   * // a serialized object\n   * console.log(block.cid.toString())\n   * // Logs:\n   * // the CID of the object\n   * ```\n   */\n  put(block: Uint8Array, options?: BlockPutOptions): Promise<CID>\n\n  /**\n   * Remove one or more IPFS block(s) from the underlying block store\n   *\n   * @example\n   *\n   * ```js\n   * for await (const result of ipfs.block.rm(cid)) {\n   *   if (result.error) {\n   *     console.error(`Failed to remove block ${result.cid} due to ${result.error.message}`)\n   *   } else {\n   *    console.log(`Removed block ${result.cid}`)\n   *   }\n   * }\n   * ```\n   */\n  rm(cid: CID | CID[], options?: BlockRmOptions): AsyncIterable<BlockRmResult>\n\n  /**\n   * Print information of a raw IPFS block\n   *\n   * @example\n   *\n   * ```js\n   * const cid = CID.parse('QmQULBtTjNcMwMr4VMNknnVv3RpytrLSdgpvMcTnfNhrBJ')\n   * const stats = await ipfs.block.stat(cid)\n   * console.log(stats.cid.toString())\n   * // Logs: QmQULBtTjNcMwMr4VMNknnVv3RpytrLSdgpvMcTnfNhrBJ\n   * console.log(stat.size)\n   * // Logs: 3739\n   * ```\n   */\n  stat(cid: CID, options?: HTTPRPCOptions): Promise<BlockStatResult>\n}\n\nexport function createBlock (client: HTTPRPCClient): BlockAPI {\n  return {\n    get: createGet(client),\n    put: createPut(client),\n    rm: createRm(client),\n    stat: createStat(client)\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,UAAU;AACpC,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,UAAU,QAAQ,WAAW;AAsItC,OAAM,SAAUC,WAAWA,CAAEC,MAAqB;EAChD,OAAO;IACLC,GAAG,EAAEN,SAAS,CAACK,MAAM,CAAC;IACtBE,GAAG,EAAEN,SAAS,CAACI,MAAM,CAAC;IACtBG,EAAE,EAAEN,QAAQ,CAACG,MAAM,CAAC;IACpBI,IAAI,EAAEN,UAAU,CAACE,MAAM;GACxB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}