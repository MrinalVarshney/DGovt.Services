{"ast":null,"code":"import { anySignal } from 'any-signal';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { multipartRequest } from '../lib/multipart-request.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport function createReplace(client) {\n  return async function replace(config, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    try {\n      const res = await client.post('config/replace', {\n        signal,\n        searchParams: toUrlSearchParams(options),\n        ...(await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers))\n      });\n      await res.text();\n    } finally {\n      signal.clear();\n    }\n  };\n}","map":{"version":3,"names":["anySignal","fromString","uint8ArrayFromString","multipartRequest","toUrlSearchParams","createReplace","client","replace","config","options","controller","AbortController","signal","res","post","searchParams","JSON","stringify","headers","text","clear"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/config/replace.ts"],"sourcesContent":["import { anySignal } from 'any-signal'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { multipartRequest } from '../lib/multipart-request.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport type { ConfigAPI } from './index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport function createReplace (client: HTTPRPCClient): ConfigAPI['replace'] {\n  return async function replace (config, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    try {\n      const res = await client.post('config/replace', {\n        signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers)\n        )\n      })\n\n      await res.text()\n    } finally {\n      signal.clear()\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,iBAAiB,QAAQ,gCAAgC;AAIlE,OAAM,SAAUC,aAAaA,CAAEC,MAAqB;EAClD,OAAO,eAAeC,OAAOA,CAAEC,MAAM,EAAEC,OAAO,GAAG,EAAE;IACjD;IACA,MAAMC,UAAU,GAAG,IAAIC,eAAe,EAAE;IACxC,MAAMC,MAAM,GAAGZ,SAAS,CAAC,CAACU,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC,CAAC;IAE7D,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMP,MAAM,CAACQ,IAAI,CAAC,gBAAgB,EAAE;QAC9CF,MAAM;QACNG,YAAY,EAAEX,iBAAiB,CAACK,OAAO,CAAC;QACxC,IACE,MAAMN,gBAAgB,CAAC,CAACD,oBAAoB,CAACc,IAAI,CAACC,SAAS,CAACT,MAAM,CAAC,CAAC,CAAC,EAAEE,UAAU,EAAED,OAAO,CAACS,OAAO,CAAC;OAEtG,CAAC;MAEF,MAAML,GAAG,CAACM,IAAI,EAAE;IAClB,CAAC,SAAS;MACRP,MAAM,CAACQ,KAAK,EAAE;IAChB;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}