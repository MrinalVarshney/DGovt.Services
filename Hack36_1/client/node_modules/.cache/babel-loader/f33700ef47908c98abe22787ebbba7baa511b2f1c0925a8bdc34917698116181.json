{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * Seamlessly use Node.js streams with `it-pipe` and friends.\n *\n * @example Convert readable stream to source iterable\n *\n * ```TypeScript\n * import fs from 'node:fs'\n * import * as toIterable from 'stream-to-it'\n *\n * const readable = fs.createReadStream('/path/to/file')\n * // Node.js streams are already async iterable so this is just s => s\n * const source = toIterable.source<Buffer>(readable)\n *\n * for await (const chunk of source) {\n *   console.log(chunk.toString())\n * }\n * ```\n *\n * Also works with browser [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream):\n *\n * ```TypeScript\n * import * as toIterable from 'stream-to-it'\n *\n * const res = await fetch('http://example.org/file.jpg')\n *\n * if (res.body == null) {\n *   throw new Error('Body was not set')\n * }\n *\n * for await (const chunk of toIterable.source(res.body)) {\n *   console.log(chunk.toString())\n * }\n * ```\n *\n * @example Convert writable stream to sink iterable\n *\n * ```TypeScript\n * import fs from 'node:fs'\n * import { pipe } from 'it-pipe'\n * import * as toIterable from 'stream-to-it'\n *\n * const source = [Buffer.from('Hello '), Buffer.from('World!')]\n * const sink = toIterable.sink(fs.createWriteStream('/path/to/file'))\n *\n * await pipe(source, sink)\n * ```\n *\n * @example Convert transform stream to transform iterable\n *\n * ```TypeScript\n * import fs from 'node:fs'\n * import { Transform } from 'node:stream'\n * import { pipe } from 'it-pipe'\n * import * as toIterable from 'stream-to-it'\n *\n * const output = await pipe(\n *   [true, false, true, true],\n *   toIterable.transform(new Transform({ // Inverter transform :)\n *     transform (chunk, enc, cb) {\n *       cb(null, !chunk)\n *     }\n *   })),\n *   // Collect and return the chunks\n *   async source => {\n *     const chunks = []\n *     for await (const chunk of source) chunks.push(chunk)\n *     return chunks\n *   }\n * )\n *\n * console.log(output) // [ false, true, false, false ]\n * ```\n *\n * ## Related\n *\n * - [`it-to-stream`](https://www.npmjs.com/package/it-to-stream) Convert streaming iterables to Node.js streams\n * - [`it-pipe`](https://www.npmjs.com/package/it-pipe) Utility to \"pipe\" async iterables together\n */\nexport { source } from './source.js';\nexport { sink } from './sink.js';\nexport { transform } from './transform.js';\nexport { duplex } from './duplex.js';","map":{"version":3,"names":["source","sink","transform","duplex"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/stream-to-it/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * Seamlessly use Node.js streams with `it-pipe` and friends.\n *\n * @example Convert readable stream to source iterable\n *\n * ```TypeScript\n * import fs from 'node:fs'\n * import * as toIterable from 'stream-to-it'\n *\n * const readable = fs.createReadStream('/path/to/file')\n * // Node.js streams are already async iterable so this is just s => s\n * const source = toIterable.source<Buffer>(readable)\n *\n * for await (const chunk of source) {\n *   console.log(chunk.toString())\n * }\n * ```\n *\n * Also works with browser [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream):\n *\n * ```TypeScript\n * import * as toIterable from 'stream-to-it'\n *\n * const res = await fetch('http://example.org/file.jpg')\n *\n * if (res.body == null) {\n *   throw new Error('Body was not set')\n * }\n *\n * for await (const chunk of toIterable.source(res.body)) {\n *   console.log(chunk.toString())\n * }\n * ```\n *\n * @example Convert writable stream to sink iterable\n *\n * ```TypeScript\n * import fs from 'node:fs'\n * import { pipe } from 'it-pipe'\n * import * as toIterable from 'stream-to-it'\n *\n * const source = [Buffer.from('Hello '), Buffer.from('World!')]\n * const sink = toIterable.sink(fs.createWriteStream('/path/to/file'))\n *\n * await pipe(source, sink)\n * ```\n *\n * @example Convert transform stream to transform iterable\n *\n * ```TypeScript\n * import fs from 'node:fs'\n * import { Transform } from 'node:stream'\n * import { pipe } from 'it-pipe'\n * import * as toIterable from 'stream-to-it'\n *\n * const output = await pipe(\n *   [true, false, true, true],\n *   toIterable.transform(new Transform({ // Inverter transform :)\n *     transform (chunk, enc, cb) {\n *       cb(null, !chunk)\n *     }\n *   })),\n *   // Collect and return the chunks\n *   async source => {\n *     const chunks = []\n *     for await (const chunk of source) chunks.push(chunk)\n *     return chunks\n *   }\n * )\n *\n * console.log(output) // [ false, true, false, false ]\n * ```\n *\n * ## Related\n *\n * - [`it-to-stream`](https://www.npmjs.com/package/it-to-stream) Convert streaming iterables to Node.js streams\n * - [`it-pipe`](https://www.npmjs.com/package/it-pipe) Utility to \"pipe\" async iterables together\n */\n\nexport { source } from './source.js'\nexport { sink } from './sink.js'\nexport { transform } from './transform.js'\nexport { duplex } from './duplex.js'\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA,SAASA,MAAM,QAAQ,aAAa;AACpC,SAASC,IAAI,QAAQ,WAAW;AAChC,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,MAAM,QAAQ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}