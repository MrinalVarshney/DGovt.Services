{"ast":null,"code":"import { anySignal } from 'any-signal';\nimport { CID } from 'multiformats/cid';\nimport { multipartRequest } from './lib/multipart-request.js';\nimport { objectToCamel } from './lib/object-to-camel.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nexport function createAddAll(client) {\n  return async function* addAll(source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    try {\n      const {\n        headers,\n        body,\n        total,\n        parts\n      } = await multipartRequest(source, controller, options.headers);\n      // In browser response body only starts streaming once upload is\n      // complete, at which point all the progress updates are invalid. If\n      // length of the content is computable we can interpret progress from\n      // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n      // in which case we disable progress updates to be written out.\n      const [progressFn, onUploadProgress] = typeof options.progress === 'function' ? createProgressHandler(total, options.progress, parts) : [undefined, undefined];\n      const res = await client.post('add', {\n        searchParams: toUrlSearchParams({\n          'stream-channels': true,\n          ...options,\n          progress: Boolean(progressFn)\n        }),\n        onUploadProgress,\n        signal,\n        headers,\n        body\n      });\n      for await (let file of res.ndjson()) {\n        file = objectToCamel(file);\n        if (file.hash !== undefined) {\n          yield toCoreInterface(file);\n        } else if (progressFn != null) {\n          progressFn(file.bytes ?? 0, file.name);\n        }\n      }\n    } finally {\n      signal.clear();\n    }\n  };\n}\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n */\nconst createProgressHandler = (total, progress, parts) => parts != null ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0;\n  const count = parts.length;\n  return ({\n    loaded,\n    total\n  }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size);\n    while (index < count) {\n      const {\n        start,\n        end,\n        name\n      } = parts[index];\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name);\n        break;\n        // If passed current part range report final byte for the chunk and\n        // move to next one.\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\nfunction toCoreInterface({\n  name,\n  hash,\n  size,\n  mode,\n  mtime,\n  mtimeNsecs\n}) {\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  };\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs ?? 0\n    };\n  }\n  return output;\n}","map":{"version":3,"names":["anySignal","CID","multipartRequest","objectToCamel","toUrlSearchParams","createAddAll","client","addAll","source","options","controller","AbortController","signal","headers","body","total","parts","progressFn","onUploadProgress","progress","createProgressHandler","undefined","res","post","searchParams","Boolean","file","ndjson","hash","toCoreInterface","bytes","name","clear","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","cid","parse","parseInt","secs","nsecs"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/add-all.ts"],"sourcesContent":["import { anySignal } from 'any-signal'\nimport { CID } from 'multiformats/cid'\nimport { multipartRequest } from './lib/multipart-request.js'\nimport { objectToCamel } from './lib/object-to-camel.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport type { AddProgressFn, AddResult, KuboRPCClient, UploadProgressFn } from './index.js'\nimport type { HTTPRPCClient } from './lib/core.js'\n\nexport function createAddAll (client: HTTPRPCClient): KuboRPCClient['addAll'] {\n  return async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    try {\n      const { headers, body, total, parts } =\n        await multipartRequest(source, controller, options.headers)\n\n      // In browser response body only starts streaming once upload is\n      // complete, at which point all the progress updates are invalid. If\n      // length of the content is computable we can interpret progress from\n      // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n      // in which case we disable progress updates to be written out.\n      const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n        ? createProgressHandler(total, options.progress, parts)\n        : [undefined, undefined]\n\n      const res = await client.post('add', {\n        searchParams: toUrlSearchParams({\n          'stream-channels': true,\n          ...options,\n          progress: Boolean(progressFn)\n        }),\n        onUploadProgress,\n        signal,\n        headers,\n        body\n      })\n\n      for await (let file of res.ndjson()) {\n        file = objectToCamel(file)\n\n        if (file.hash !== undefined) {\n          yield toCoreInterface(file)\n        } else if (progressFn != null) {\n          progressFn(file.bytes ?? 0, file.name)\n        }\n      }\n    } finally {\n      signal.clear()\n    }\n  }\n}\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n */\nconst createProgressHandler = (total: number, progress: AddProgressFn, parts?: Array<{ name?: string, start: number, end: number }>): [AddProgressFn, undefined] | [undefined, UploadProgressFn] =>\n  parts != null ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n */\nconst createOnUploadProgress = (size: number, parts: Array<{ name?: string, start: number, end: number }>, progress: AddProgressFn): UploadProgressFn => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }: any): AddResult {\n  const output: AddResult = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs ?? 0\n    }\n  }\n\n  return output\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}