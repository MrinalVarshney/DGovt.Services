{"ast":null,"code":"const LOAD_CODEC = async codeOrName => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`));\nexport class Multicodecs {\n  _codecsByName;\n  _codecsByCode;\n  _loadCodec;\n  constructor(options) {\n    // Object with current list of active resolvers\n    this._codecsByName = {};\n    // Object with current list of active resolvers\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec ?? LOAD_CODEC;\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n  /**\n   * Add support for a block codec\n   */\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] != null || this._codecsByCode[codec.code] != null) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`);\n    }\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n  /**\n   * Remove support for a block codec\n   */\n  removeCodec(codec) {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete this._codecsByName[codec.name];\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete this._codecsByCode[codec.code];\n  }\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n    // @ts-expect-error cannot derive code type\n    if (table[code] != null) {\n      // @ts-expect-error cannot derive code type\n      return table[code];\n    }\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code);\n    // @ts-expect-error cannot derive code type\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n    return codec;\n  }\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n}","map":{"version":3,"names":["LOAD_CODEC","codeOrName","Promise","reject","Error","Multicodecs","_codecsByName","_codecsByCode","_loadCodec","constructor","options","loadCodec","codec","codecs","addCodec","name","code","removeCodec","getCodec","table","listCodecs","Object","values"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/multicodecs.ts"],"sourcesContent":["import type { BlockCodec } from 'multiformats/codecs/interface'\n\nexport interface LoadCodecFn { (codeOrName: number | string): Promise<BlockCodec<any, any>> }\n\nconst LOAD_CODEC: LoadCodecFn = async (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nexport interface MultihashesInit {\n  loadCodec?: LoadCodecFn\n  codecs: Array<BlockCodec<any, any>>\n}\n\nexport class Multicodecs {\n  private readonly _codecsByName: Record<string, BlockCodec<any, any>>\n  private readonly _codecsByCode: Record<number, BlockCodec<any, any>>\n  private readonly _loadCodec: LoadCodecFn\n\n  constructor (options: MultihashesInit) {\n    // Object with current list of active resolvers\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec ?? LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   */\n  addCodec (codec: BlockCodec<any, any>): void {\n    if (this._codecsByName[codec.name] != null || this._codecsByCode[codec.code] != null) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   */\n  removeCodec (codec: BlockCodec<any, any>): void {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete this._codecsByName[codec.name]\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete this._codecsByCode[codec.code]\n  }\n\n  async getCodec (code: number | string): Promise<BlockCodec<any, any>> {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    // @ts-expect-error cannot derive code type\n    if (table[code] != null) {\n      // @ts-expect-error cannot derive code type\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    // @ts-expect-error cannot derive code type\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs (): Array<BlockCodec<any, any>> {\n    return Object.values(this._codecsByName)\n  }\n}\n"],"mappings":"AAIA,MAAMA,UAAU,GAAgB,MAAOC,UAAU,IAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,uBAAuBH,UAAU,GAAG,CAAC,CAAC;AAOrH,OAAM,MAAOI,WAAW;EACLC,aAAa;EACbC,aAAa;EACbC,UAAU;EAE3BC,YAAaC,OAAwB;IACnC;IACA,IAAI,CAACJ,aAAa,GAAG,EAAE;IAEvB;IACA,IAAI,CAACC,aAAa,GAAG,EAAE;IAEvB,IAAI,CAACC,UAAU,GAAGE,OAAO,CAACC,SAAS,IAAIX,UAAU;IAEjD;IACA,KAAK,MAAMY,KAAK,IAAIF,OAAO,CAACG,MAAM,EAAE;MAClC,IAAI,CAACC,QAAQ,CAACF,KAAK,CAAC;IACtB;EACF;EAEA;;;EAGAE,QAAQA,CAAEF,KAA2B;IACnC,IAAI,IAAI,CAACN,aAAa,CAACM,KAAK,CAACG,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,CAACR,aAAa,CAACK,KAAK,CAACI,IAAI,CAAC,IAAI,IAAI,EAAE;MACpF,MAAM,IAAIZ,KAAK,CAAC,sCAAsCQ,KAAK,CAACG,IAAI,GAAG,CAAC;IACtE;IAEA,IAAI,CAACT,aAAa,CAACM,KAAK,CAACG,IAAI,CAAC,GAAGH,KAAK;IACtC,IAAI,CAACL,aAAa,CAACK,KAAK,CAACI,IAAI,CAAC,GAAGJ,KAAK;EACxC;EAEA;;;EAGAK,WAAWA,CAAEL,KAA2B;IACtC;IACA,OAAO,IAAI,CAACN,aAAa,CAACM,KAAK,CAACG,IAAI,CAAC;IACrC;IACA,OAAO,IAAI,CAACR,aAAa,CAACK,KAAK,CAACI,IAAI,CAAC;EACvC;EAEA,MAAME,QAAQA,CAAEF,IAAqB;IACnC,MAAMG,KAAK,GAAG,OAAOH,IAAI,KAAK,QAAQ,GAAG,IAAI,CAACV,aAAa,GAAG,IAAI,CAACC,aAAa;IAEhF;IACA,IAAIY,KAAK,CAACH,IAAI,CAAC,IAAI,IAAI,EAAE;MACvB;MACA,OAAOG,KAAK,CAACH,IAAI,CAAC;IACpB;IAEA;IACA,MAAMJ,KAAK,GAAG,MAAM,IAAI,CAACJ,UAAU,CAACQ,IAAI,CAAC;IAEzC;IACA,IAAIG,KAAK,CAACH,IAAI,CAAC,IAAI,IAAI,EAAE;MACvB,IAAI,CAACF,QAAQ,CAACF,KAAK,CAAC;IACtB;IAEA,OAAOA,KAAK;EACd;EAEAQ,UAAUA,CAAA;IACR,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAChB,aAAa,CAAC;EAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}