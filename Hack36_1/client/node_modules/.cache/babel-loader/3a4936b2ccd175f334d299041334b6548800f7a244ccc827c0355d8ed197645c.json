{"ast":null,"code":"import { createAddrs } from './addrs.js';\nimport { createConnect } from './connect.js';\nimport { createDisconnect } from './disconnect.js';\nimport { createLocalAddrs } from './local-addrs.js';\nimport { createPeers } from './peers.js';\nexport function createSwarm(client) {\n  return {\n    addrs: createAddrs(client),\n    connect: createConnect(client),\n    disconnect: createDisconnect(client),\n    localAddrs: createLocalAddrs(client),\n    peers: createPeers(client)\n  };\n}","map":{"version":3,"names":["createAddrs","createConnect","createDisconnect","createLocalAddrs","createPeers","createSwarm","client","addrs","connect","disconnect","localAddrs","peers"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/swarm/index.ts"],"sourcesContent":["import { createAddrs } from './addrs.js'\nimport { createConnect } from './connect.js'\nimport { createDisconnect } from './disconnect.js'\nimport { createLocalAddrs } from './local-addrs.js'\nimport { createPeers } from './peers.js'\nimport type { HTTPRPCOptions } from '../index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\nimport type { PeerId } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface SwarmAPI {\n  /**\n   * List of known addresses of each peer connected\n   */\n  addrs(options?: HTTPRPCOptions): Promise<AddrsResult[]>\n\n  /**\n   * Open a connection to a given address or peer id\n   */\n  connect(multiaddrOrPeerId: Multiaddr | PeerId, options?: HTTPRPCOptions): Promise<void>\n\n  /**\n   * Close a connection to a given address or peer id\n   */\n  disconnect(multiaddrOrPeerId: Multiaddr | PeerId, options?: HTTPRPCOptions): Promise<void>\n\n  /**\n   * Local addresses this node is listening on\n   */\n  localAddrs(options?: HTTPRPCOptions): Promise<Multiaddr[]>\n\n  /**\n   * Return a list of connected peers\n   */\n  peers(options?: SwarmPeersOptions): Promise<SwarmPeersResult[]>\n}\n\nexport interface AddrsResult {\n  id: PeerId\n  addrs: Multiaddr[]\n}\n\nexport interface SwarmPeersOptions extends HTTPRPCOptions {\n  direction?: boolean\n  streams?: boolean\n  verbose?: boolean\n  latency?: boolean\n}\n\nexport interface SwarmPeersResult {\n  addr: Multiaddr\n  peer: PeerId\n  latency?: string\n  muxer?: string\n  streams?: string[]\n  direction?: 'inbound' | 'outbound'\n  error?: Error\n}\n\nexport function createSwarm (client: HTTPRPCClient): SwarmAPI {\n  return {\n    addrs: createAddrs(client),\n    connect: createConnect(client),\n    disconnect: createDisconnect(client),\n    localAddrs: createLocalAddrs(client),\n    peers: createPeers(client)\n  }\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,YAAY;AACxC,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,WAAW,QAAQ,YAAY;AAuDxC,OAAM,SAAUC,WAAWA,CAAEC,MAAqB;EAChD,OAAO;IACLC,KAAK,EAAEP,WAAW,CAACM,MAAM,CAAC;IAC1BE,OAAO,EAAEP,aAAa,CAACK,MAAM,CAAC;IAC9BG,UAAU,EAAEP,gBAAgB,CAACI,MAAM,CAAC;IACpCI,UAAU,EAAEP,gBAAgB,CAACG,MAAM,CAAC;IACpCK,KAAK,EAAEP,WAAW,CAACE,MAAM;GAC1B;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}