{"ast":null,"code":"import { anySignal } from 'any-signal';\nimport { CID } from 'multiformats/cid';\nimport { multipartRequest } from '../lib/multipart-request.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport function createImport(client) {\n  return async function* dagImport(source, options = {}) {\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    try {\n      const {\n        headers,\n        body\n      } = await multipartRequest(source, controller, options.headers);\n      const res = await client.post('dag/import', {\n        signal,\n        headers,\n        body,\n        searchParams: toUrlSearchParams({\n          'pin-roots': options.pinRoots\n        })\n      });\n      for await (const {\n        Root\n      } of res.ndjson()) {\n        if (Root !== undefined) {\n          const {\n            Cid: {\n              '/': Cid\n            },\n            PinErrorMsg\n          } = Root;\n          yield {\n            root: {\n              cid: CID.parse(Cid),\n              pinErrorMsg: PinErrorMsg\n            }\n          };\n        }\n      }\n    } finally {\n      signal.clear();\n    }\n  };\n}","map":{"version":3,"names":["anySignal","CID","multipartRequest","toUrlSearchParams","createImport","client","dagImport","source","options","controller","AbortController","signal","headers","body","res","post","searchParams","pinRoots","Root","ndjson","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg","clear"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/dag/import.ts"],"sourcesContent":["import { anySignal } from 'any-signal'\nimport { CID } from 'multiformats/cid'\nimport { multipartRequest } from '../lib/multipart-request.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport type { DAGAPI } from './index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport function createImport (client: HTTPRPCClient): DAGAPI['import'] {\n  return async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    try {\n      const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n      const res = await client.post('dag/import', {\n        signal,\n        headers,\n        body,\n        searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n      })\n\n      for await (const { Root } of res.ndjson()) {\n        if (Root !== undefined) {\n          const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n          yield {\n            root: {\n              cid: CID.parse(Cid),\n              pinErrorMsg: PinErrorMsg\n            }\n          }\n        }\n      }\n    } finally {\n      signal.clear()\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,iBAAiB,QAAQ,gCAAgC;AAIlE,OAAM,SAAUC,YAAYA,CAAEC,MAAqB;EACjD,OAAO,gBAAiBC,SAASA,CAAEC,MAAM,EAAEC,OAAO,GAAG,EAAE;IACrD,MAAMC,UAAU,GAAG,IAAIC,eAAe,EAAE;IACxC,MAAMC,MAAM,GAAGX,SAAS,CAAC,CAACS,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC,CAAC;IAE7D,IAAI;MACF,MAAM;QAAEC,OAAO;QAAEC;MAAI,CAAE,GAAG,MAAMX,gBAAgB,CAACK,MAAM,EAAEE,UAAU,EAAED,OAAO,CAACI,OAAO,CAAC;MAErF,MAAME,GAAG,GAAG,MAAMT,MAAM,CAACU,IAAI,CAAC,YAAY,EAAE;QAC1CJ,MAAM;QACNC,OAAO;QACPC,IAAI;QACJG,YAAY,EAAEb,iBAAiB,CAAC;UAAE,WAAW,EAAEK,OAAO,CAACS;QAAQ,CAAE;OAClE,CAAC;MAEF,WAAW,MAAM;QAAEC;MAAI,CAAE,IAAIJ,GAAG,CAACK,MAAM,EAAE,EAAE;QACzC,IAAID,IAAI,KAAKE,SAAS,EAAE;UACtB,MAAM;YAAEC,GAAG,EAAE;cAAE,GAAG,EAAEA;YAAG,CAAE;YAAEC;UAAW,CAAE,GAAGJ,IAAI;UAE/C,MAAM;YACJK,IAAI,EAAE;cACJC,GAAG,EAAEvB,GAAG,CAACwB,KAAK,CAACJ,GAAG,CAAC;cACnBK,WAAW,EAAEJ;;WAEhB;QACH;MACF;IACF,CAAC,SAAS;MACRX,MAAM,CAACgB,KAAK,EAAE;IAChB;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}