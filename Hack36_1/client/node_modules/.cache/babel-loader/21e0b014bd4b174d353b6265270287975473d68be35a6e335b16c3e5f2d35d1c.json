{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport function createRm(client) {\n  return async function* rm(cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid];\n    }\n    const res = await client.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed);\n    }\n  };\n}\nfunction toCoreInterface(removed) {\n  const out = {\n    cid: CID.parse(removed.Hash)\n  };\n  if (removed.Error != null) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}","map":{"version":3,"names":["CID","toUrlSearchParams","createRm","client","rm","cid","options","Array","isArray","res","post","signal","searchParams","arg","map","toString","headers","removed","ndjson","toCoreInterface","out","parse","Hash","Error","error"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/block/rm.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport type { BlockRmResult, BlockAPI } from './index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport function createRm (client: HTTPRPCClient): BlockAPI['rm'] {\n  return async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await client.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n}\n\nfunction toCoreInterface (removed: any): BlockRmResult {\n  const out: BlockRmResult = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error != null) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,iBAAiB,QAAQ,gCAAgC;AAIlE,OAAM,SAAUC,QAAQA,CAAEC,MAAqB;EAC7C,OAAO,gBAAiBC,EAAEA,CAAEC,GAAG,EAAEC,OAAO,GAAG,EAAE;IAC3C,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;MACvBA,GAAG,GAAG,CAACA,GAAG,CAAC;IACb;IAEA,MAAMI,GAAG,GAAG,MAAMN,MAAM,CAACO,IAAI,CAAC,UAAU,EAAE;MACxCC,MAAM,EAAEL,OAAO,CAACK,MAAM;MACtBC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAER,GAAG,CAACS,GAAG,CAACT,GAAG,IAAIA,GAAG,CAACU,QAAQ,EAAE,CAAC;QACnC,iBAAiB,EAAE,IAAI;QACvB,GAAGT;OACJ,CAAC;MACFU,OAAO,EAAEV,OAAO,CAACU;KAClB,CAAC;IAEF,WAAW,MAAMC,OAAO,IAAIR,GAAG,CAACS,MAAM,EAAE,EAAE;MACxC,MAAMC,eAAe,CAACF,OAAO,CAAC;IAChC;EACF,CAAC;AACH;AAEA,SAASE,eAAeA,CAAEF,OAAY;EACpC,MAAMG,GAAG,GAAkB;IACzBf,GAAG,EAAEL,GAAG,CAACqB,KAAK,CAACJ,OAAO,CAACK,IAAI;GAC5B;EAED,IAAIL,OAAO,CAACM,KAAK,IAAI,IAAI,EAAE;IACzBH,GAAG,CAACI,KAAK,GAAG,IAAID,KAAK,CAACN,OAAO,CAACM,KAAK,CAAC;EACtC;EAEA,OAAOH,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}