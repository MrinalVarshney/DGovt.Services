{"ast":null,"code":"import { nanoid } from 'nanoid';\nimport { isElectronRenderer } from 'wherearewe';\nimport { multipartRequest as multipartRequestBrowser } from './multipart-request.browser.js';\nimport { multipartRequest as multipartRequestNode } from './multipart-request.node.js';\nexport async function multipartRequest(source, abortController, headers = {}, boundary = `-----------------------------${nanoid()}`) {\n  let req = multipartRequestNode;\n  // In electron-renderer we use native fetch and should encode body using native\n  // form data.\n  if (isElectronRenderer) {\n    req = multipartRequestBrowser;\n  }\n  return req(source, abortController, headers, boundary);\n}","map":{"version":3,"names":["nanoid","isElectronRenderer","multipartRequest","multipartRequestBrowser","multipartRequestNode","source","abortController","headers","boundary","req"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/multipart-request.ts"],"sourcesContent":["import { nanoid } from 'nanoid'\nimport { isElectronRenderer } from 'wherearewe'\nimport { multipartRequest as multipartRequestBrowser } from './multipart-request.browser.js'\nimport { multipartRequest as multipartRequestNode } from './multipart-request.node.js'\nimport type { ImportCandidateStream } from '../index.js'\n\nexport interface MultipartRequest {\n  total: number\n  parts: Array<{ name?: string, start: number, end: number }>\n  headers: Headers | Record<string, string>\n  body: BodyInit\n}\n\nexport async function multipartRequest (source: ImportCandidateStream, abortController: AbortController, headers: Headers | Record<string, string> = {}, boundary: string = `-----------------------------${nanoid()}`): Promise<MultipartRequest> {\n  let req = multipartRequestNode\n\n  // In electron-renderer we use native fetch and should encode body using native\n  // form data.\n  if (isElectronRenderer) {\n    req = multipartRequestBrowser\n  }\n\n  return req(source, abortController, headers, boundary)\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,kBAAkB,QAAQ,YAAY;AAC/C,SAASC,gBAAgB,IAAIC,uBAAuB,QAAQ,gCAAgC;AAC5F,SAASD,gBAAgB,IAAIE,oBAAoB,QAAQ,6BAA6B;AAUtF,OAAO,eAAeF,gBAAgBA,CAAEG,MAA6B,EAAEC,eAAgC,EAAEC,OAAA,GAA4C,EAAE,EAAEC,QAAA,GAAmB,gCAAgCR,MAAM,EAAE,EAAE;EACpN,IAAIS,GAAG,GAAGL,oBAAoB;EAE9B;EACA;EACA,IAAIH,kBAAkB,EAAE;IACtBQ,GAAG,GAAGN,uBAAuB;EAC/B;EAEA,OAAOM,GAAG,CAACJ,MAAM,EAAEC,eAAe,EAAEC,OAAO,EAAEC,QAAQ,CAAC;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}