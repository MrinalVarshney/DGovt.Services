{"ast":null,"code":"import { anySignal } from 'any-signal';\nimport { parseMtime } from '../lib/files/utils.js';\nimport { modeToString } from '../lib/mode-to-string.js';\nimport { multipartRequest } from '../lib/multipart-request.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport function createWrite(client) {\n  return async function write(path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    try {\n      const res = await client.post('files/write', {\n        signal,\n        searchParams: toUrlSearchParams({\n          arg: path,\n          streamChannels: true,\n          count: options.length,\n          ...options\n        }),\n        ...(await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers))\n      });\n      await res.text();\n    } finally {\n      signal.clear();\n    }\n  };\n}","map":{"version":3,"names":["anySignal","parseMtime","modeToString","multipartRequest","toUrlSearchParams","createWrite","client","write","path","input","options","controller","AbortController","signal","res","post","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","text","clear"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/files/write.ts"],"sourcesContent":["import { anySignal } from 'any-signal'\nimport { parseMtime } from '../lib/files/utils.js'\nimport { modeToString } from '../lib/mode-to-string.js'\nimport { multipartRequest } from '../lib/multipart-request.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport type { FilesAPI } from './index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport function createWrite (client: HTTPRPCClient): FilesAPI['write'] {\n  return async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    try {\n      const res = await client.post('files/write', {\n        signal,\n        searchParams: toUrlSearchParams({\n          arg: path,\n          streamChannels: true,\n          count: options.length,\n          ...options\n        }),\n        ...(\n          await multipartRequest([{\n            content: input,\n            path: 'arg',\n            mode: modeToString(options.mode),\n            mtime: parseMtime(options.mtime)\n          }], controller, options.headers)\n        )\n      })\n\n      await res.text()\n    } finally {\n      signal.clear()\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,iBAAiB,QAAQ,gCAAgC;AAIlE,OAAM,SAAUC,WAAWA,CAAEC,MAAqB;EAChD,OAAO,eAAeC,KAAKA,CAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,GAAG,EAAE;IACpD;IACA,MAAMC,UAAU,GAAG,IAAIC,eAAe,EAAE;IACxC,MAAMC,MAAM,GAAGb,SAAS,CAAC,CAACW,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC,CAAC;IAE7D,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMR,MAAM,CAACS,IAAI,CAAC,aAAa,EAAE;QAC3CF,MAAM;QACNG,YAAY,EAAEZ,iBAAiB,CAAC;UAC9Ba,GAAG,EAAET,IAAI;UACTU,cAAc,EAAE,IAAI;UACpBC,KAAK,EAAET,OAAO,CAACU,MAAM;UACrB,GAAGV;SACJ,CAAC;QACF,IACE,MAAMP,gBAAgB,CAAC,CAAC;UACtBkB,OAAO,EAAEZ,KAAK;UACdD,IAAI,EAAE,KAAK;UACXc,IAAI,EAAEpB,YAAY,CAACQ,OAAO,CAACY,IAAI,CAAC;UAChCC,KAAK,EAAEtB,UAAU,CAACS,OAAO,CAACa,KAAK;SAChC,CAAC,EAAEZ,UAAU,EAAED,OAAO,CAACc,OAAO,CAAC;OAEnC,CAAC;MAEF,MAAMV,GAAG,CAACW,IAAI,EAAE;IAClB,CAAC,SAAS;MACRZ,MAAM,CAACa,KAAK,EAAE;IAChB;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}