{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * Lets you look at the contents of an async iterator and decide what to do\n *\n * @example\n *\n * ```javascript\n * import peekable from 'it-peekable'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const it = peekable(value)\n *\n * const first = it.peek()\n *\n * console.info(first) // 0\n *\n * it.push(first)\n *\n * console.info([...it])\n * // [ 0, 1, 2, 3, 4 ]\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import peekable from 'it-peekable'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const it = peekable(values())\n *\n * const first = await it.peek()\n *\n * console.info(first) // 0\n *\n * it.push(first)\n *\n * console.info(await all(it))\n * // [ 0, 1, 2, 3, 4 ]\n * ```\n */\nfunction peekable(iterable) {\n  // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable\n  const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n  // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable\n  ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n  // @ts-expect-error can't use Symbol.iterator to index iterable since it might be AsyncIterable\n  : [iterable[Symbol.iterator](), Symbol.iterator];\n  const queue = [];\n  // @ts-expect-error can't use symbol to index peekable\n  return {\n    peek: () => {\n      return iterator.next();\n    },\n    push: value => {\n      queue.push(value);\n    },\n    next: () => {\n      if (queue.length > 0) {\n        return {\n          done: false,\n          value: queue.shift()\n        };\n      }\n      return iterator.next();\n    },\n    [symbol]() {\n      return this;\n    }\n  };\n}\nexport default peekable;","map":{"version":3,"names":["peekable","iterable","iterator","symbol","Symbol","asyncIterator","queue","peek","next","push","value","length","done","shift"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/it-peekable/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * Lets you look at the contents of an async iterator and decide what to do\n *\n * @example\n *\n * ```javascript\n * import peekable from 'it-peekable'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const it = peekable(value)\n *\n * const first = it.peek()\n *\n * console.info(first) // 0\n *\n * it.push(first)\n *\n * console.info([...it])\n * // [ 0, 1, 2, 3, 4 ]\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import peekable from 'it-peekable'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const it = peekable(values())\n *\n * const first = await it.peek()\n *\n * console.info(first) // 0\n *\n * it.push(first)\n *\n * console.info(await all(it))\n * // [ 0, 1, 2, 3, 4 ]\n * ```\n */\n\nexport interface Peek <T> {\n  peek(): IteratorResult<T, undefined>\n}\n\nexport interface AsyncPeek <T> {\n  peek(): Promise<IteratorResult<T, undefined>>\n}\n\nexport interface Push <T> {\n  push(value: T): void\n}\n\nexport type Peekable <T> = Iterable<T> & Peek<T> & Push<T> & Iterator<T>\n\nexport type AsyncPeekable <T> = AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>\n\nfunction peekable <T> (iterable: Iterable<T>): Peekable<T>\nfunction peekable <T> (iterable: AsyncIterable<T>): AsyncPeekable<T>\nfunction peekable <T> (iterable: Iterable<T> | AsyncIterable<T>): Peekable<T> | AsyncPeekable<T> {\n  // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable\n  const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n    // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable\n    ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n    // @ts-expect-error can't use Symbol.iterator to index iterable since it might be AsyncIterable\n    : [iterable[Symbol.iterator](), Symbol.iterator]\n\n  const queue: any[] = []\n\n  // @ts-expect-error can't use symbol to index peekable\n  return {\n    peek: () => {\n      return iterator.next()\n    },\n    push: (value: any) => {\n      queue.push(value)\n    },\n    next: () => {\n      if (queue.length > 0) {\n        return {\n          done: false,\n          value: queue.shift()\n        }\n      }\n\n      return iterator.next()\n    },\n    [symbol] () {\n      return this\n    }\n  }\n}\n\nexport default peekable\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA,SAASA,QAAQA,CAAMC,QAAwC;EAC7D;EACA,MAAM,CAACC,QAAQ,EAAEC,MAAM,CAAC,GAAGF,QAAQ,CAACG,MAAM,CAACC,aAAa,CAAC,IAAI;EAC3D;EAAA,EACE,CAACJ,QAAQ,CAACG,MAAM,CAACC,aAAa,CAAC,EAAE,EAAED,MAAM,CAACC,aAAa;EACzD;EAAA,EACE,CAACJ,QAAQ,CAACG,MAAM,CAACF,QAAQ,CAAC,EAAE,EAAEE,MAAM,CAACF,QAAQ,CAAC;EAElD,MAAMI,KAAK,GAAU,EAAE;EAEvB;EACA,OAAO;IACLC,IAAI,EAAEA,CAAA,KAAK;MACT,OAAOL,QAAQ,CAACM,IAAI,EAAE;IACxB,CAAC;IACDC,IAAI,EAAGC,KAAU,IAAI;MACnBJ,KAAK,CAACG,IAAI,CAACC,KAAK,CAAC;IACnB,CAAC;IACDF,IAAI,EAAEA,CAAA,KAAK;MACT,IAAIF,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;QACpB,OAAO;UACLC,IAAI,EAAE,KAAK;UACXF,KAAK,EAAEJ,KAAK,CAACO,KAAK;SACnB;;MAGH,OAAOX,QAAQ,CAACM,IAAI,EAAE;IACxB,CAAC;IACD,CAACL,MAAM,IAAC;MACN,OAAO,IAAI;IACb;GACD;AACH;AAEA,eAAeH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}