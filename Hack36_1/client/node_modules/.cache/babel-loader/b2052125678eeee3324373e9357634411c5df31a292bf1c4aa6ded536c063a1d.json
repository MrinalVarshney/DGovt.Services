{"ast":null,"code":"/**\n * Convert a Node.js [`Readable`](https://nodejs.org/dist/latest/docs/api/stream.html#class-streamreadable)\n * stream or a browser [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)\n * to an [iterable source](https://achingbrain.github.io/it-stream-types/types/Source.html).\n */\nexport function source(readable) {\n  // Browser ReadableStream\n  if (isReadableStream(readable)) {\n    return async function* () {\n      const reader = readable.getReader();\n      try {\n        while (true) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) {\n            return;\n          }\n          yield value;\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    }();\n  }\n  if (isNodeStream(readable)) {\n    return readable;\n  }\n  throw new Error('unknown stream');\n}\nfunction isNodeStream(obj) {\n  return obj[Symbol.asyncIterator] != null;\n}\nfunction isReadableStream(obj) {\n  return typeof obj?.getReader === 'function';\n}","map":{"version":3,"names":["source","readable","isReadableStream","reader","getReader","done","value","read","releaseLock","isNodeStream","Error","obj","Symbol","asyncIterator"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/stream-to-it/src/source.ts"],"sourcesContent":["import type { Readable } from 'node:stream'\n\n/**\n * Convert a Node.js [`Readable`](https://nodejs.org/dist/latest/docs/api/stream.html#class-streamreadable)\n * stream or a browser [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)\n * to an [iterable source](https://achingbrain.github.io/it-stream-types/types/Source.html).\n */\nexport function source <T = Uint8Array> (readable: Readable | ReadableStream<T>): AsyncGenerator<T> {\n  // Browser ReadableStream\n  if (isReadableStream(readable)) {\n    return (async function * () {\n      const reader = readable.getReader()\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read()\n\n          if (done) {\n            return\n          }\n\n          yield value\n        }\n      } finally {\n        reader.releaseLock()\n      }\n    })()\n  }\n\n  if (isNodeStream<T>(readable)) {\n    return readable\n  }\n\n  throw new Error('unknown stream')\n}\n\nfunction isNodeStream <T = any> (obj?: any): obj is AsyncGenerator<T> {\n  return obj[Symbol.asyncIterator] != null\n}\n\nfunction isReadableStream (obj?: any): obj is ReadableStream {\n  return typeof obj?.getReader === 'function'\n}\n"],"mappings":"AAEA;;;;;AAKA,OAAM,SAAUA,MAAMA,CAAmBC,QAAsC;EAC7E;EACA,IAAIC,gBAAgB,CAACD,QAAQ,CAAC,EAAE;IAC9B,OAAQ,mBAAgB;MACtB,MAAME,MAAM,GAAGF,QAAQ,CAACG,SAAS,EAAE;MAEnC,IAAI;QACF,OAAO,IAAI,EAAE;UACX,MAAM;YAAEC,IAAI;YAAEC;UAAK,CAAE,GAAG,MAAMH,MAAM,CAACI,IAAI,EAAE;UAE3C,IAAIF,IAAI,EAAE;YACR;UACF;UAEA,MAAMC,KAAK;QACb;MACF,CAAC,SAAS;QACRH,MAAM,CAACK,WAAW,EAAE;MACtB;IACF,CAAC,CAAC,CAAE;EACN;EAEA,IAAIC,YAAY,CAAIR,QAAQ,CAAC,EAAE;IAC7B,OAAOA,QAAQ;EACjB;EAEA,MAAM,IAAIS,KAAK,CAAC,gBAAgB,CAAC;AACnC;AAEA,SAASD,YAAYA,CAAYE,GAAS;EACxC,OAAOA,GAAG,CAACC,MAAM,CAACC,aAAa,CAAC,IAAI,IAAI;AAC1C;AAEA,SAASX,gBAAgBA,CAAES,GAAS;EAClC,OAAO,OAAOA,GAAG,EAAEP,SAAS,KAAK,UAAU;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}