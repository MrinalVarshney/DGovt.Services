{"ast":null,"code":"import { createLs } from './ls.js';\nimport { createPeers } from './peers.js';\nimport { createPublish } from './publish.js';\nimport { createSubscribe } from './subscribe.js';\nimport { SubscriptionTracker } from './subscription-tracker.js';\nimport { createUnsubscribe } from './unsubscribe.js';\nexport function createPubsub(client) {\n  const subscriptionTracker = new SubscriptionTracker();\n  return {\n    ls: createLs(client),\n    peers: createPeers(client),\n    publish: createPublish(client),\n    subscribe: createSubscribe(client, subscriptionTracker),\n    unsubscribe: createUnsubscribe(client, subscriptionTracker)\n  };\n}","map":{"version":3,"names":["createLs","createPeers","createPublish","createSubscribe","SubscriptionTracker","createUnsubscribe","createPubsub","client","subscriptionTracker","ls","peers","publish","subscribe","unsubscribe"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/pubsub/index.ts"],"sourcesContent":["import { createLs } from './ls.js'\nimport { createPeers } from './peers.js'\nimport { createPublish } from './publish.js'\nimport { createSubscribe } from './subscribe.js'\nimport { SubscriptionTracker } from './subscription-tracker.js'\nimport { createUnsubscribe } from './unsubscribe.js'\nimport type { HTTPRPCOptions } from '../index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\nimport type { EventHandler, PeerId, Message } from '@libp2p/interface'\n\nexport interface PubSubAPI {\n  /**\n   * Subscribe to a pubsub topic\n   *\n   * @example\n   * ```js\n   * const topic = 'fruit-of-the-day'\n   * const receiveMsg = (msg) => console.log(msg.data.toString())\n   *\n   * await ipfs.pubsub.subscribe(topic, receiveMsg)\n   * console.log(`subscribed to ${topic}`)\n   * ```\n   */\n  subscribe(topic: string, handler: EventHandler<Message>, options?: PubSubSubscribeOptions): Promise<void>\n\n  /**\n   * Unsubscribes from a pubsub topic\n   *\n   * @example\n   * ```js\n   * const topic = 'fruit-of-the-day'\n   * const receiveMsg = (msg) => console.log(msg.toString())\n   *\n   * await ipfs.pubsub.subscribe(topic, receiveMsg)\n   * console.log(`subscribed to ${topic}`)\n   *\n   * await ipfs.pubsub.unsubscribe(topic, receiveMsg)\n   * console.log(`unsubscribed from ${topic}`)\n   *\n   * // Or removing all listeners:\n   *\n   * const topic = 'fruit-of-the-day'\n   * const receiveMsg = (msg) => console.log(msg.toString())\n   * await ipfs.pubsub.subscribe(topic, receiveMsg);\n   * // Will unsubscribe ALL handlers for the given topic\n   * await ipfs.pubsub.unsubscribe(topic);\n   * ```\n   */\n  unsubscribe(topic: string, handler?: EventHandler<Message>, options?: HTTPRPCOptions): Promise<void>\n\n  /**\n   * Publish a data message to a pubsub topic\n   *\n   * @example\n   * ```js\n   * const topic = 'fruit-of-the-day'\n   * const msg = new TextEncoder().encode('banana')\n   *\n   * await ipfs.pubsub.publish(topic, msg)\n   * // msg was broadcasted\n   * console.log(`published to ${topic}`)\n   * ```\n   */\n  publish(topic: string, data: Uint8Array, options?: HTTPRPCOptions): Promise<void>\n\n  /**\n   * Returns the list of subscriptions the peer is subscribed to\n   */\n  ls(options?: HTTPRPCOptions): Promise<string[]>\n\n  /**\n   * Returns the peers that are subscribed to one topic.\n   *\n   * @example\n   * ```js\n   * const topic = 'fruit-of-the-day'\n   *\n   * const peerIds = await ipfs.pubsub.peers(topic)\n   * console.log(peerIds)\n   * ```\n   */\n  peers(topic: string, options?: HTTPRPCOptions): Promise<PeerId[]>\n\n  setMaxListeners?(max: number): void\n}\n\nexport interface PubSubSubscribeOptions extends HTTPRPCOptions {\n  /**\n   * A callback to receive an error if one occurs during processing\n   * subscription messages. Only supported by ipfs-http-client.\n   */\n  onError?(err: Error): void\n\n  discover?: boolean\n}\n\nexport interface PubsubApiErrorHandlerFn {\n  (err: Error, fatal: boolean, msg?: Message): void\n}\n\nexport function createPubsub (client: HTTPRPCClient): PubSubAPI {\n  const subscriptionTracker = new SubscriptionTracker()\n\n  return {\n    ls: createLs(client),\n    peers: createPeers(client),\n    publish: createPublish(client),\n    subscribe: createSubscribe(client, subscriptionTracker),\n    unsubscribe: createUnsubscribe(client, subscriptionTracker)\n  }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,SAAS;AAClC,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,iBAAiB,QAAQ,kBAAkB;AA+FpD,OAAM,SAAUC,YAAYA,CAAEC,MAAqB;EACjD,MAAMC,mBAAmB,GAAG,IAAIJ,mBAAmB,EAAE;EAErD,OAAO;IACLK,EAAE,EAAET,QAAQ,CAACO,MAAM,CAAC;IACpBG,KAAK,EAAET,WAAW,CAACM,MAAM,CAAC;IAC1BI,OAAO,EAAET,aAAa,CAACK,MAAM,CAAC;IAC9BK,SAAS,EAAET,eAAe,CAACI,MAAM,EAAEC,mBAAmB,CAAC;IACvDK,WAAW,EAAER,iBAAiB,CAACE,MAAM,EAAEC,mBAAmB;GAC3D;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}