{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { createStat } from './files/stat.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nexport function createLs(client) {\n  return async function* ls(path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`;\n    async function mapLink(link) {\n      let hash = link.Hash;\n      if (hash.includes('/') === true) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') === true ? hash : `/ipfs/${hash}`;\n        const stats = await createStat(client)(ipfsPath);\n        hash = stats.cid;\n      } else {\n        hash = CID.parse(hash);\n      }\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name != null ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      };\n      return entry;\n    }\n    const res = await client.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let result of res.ndjson()) {\n      result = result.Objects;\n      if (result == null) {\n        throw new Error('expected .Objects in results');\n      }\n      result = result[0];\n      if (result == null) {\n        throw new Error('expected one array in results.Objects');\n      }\n      const links = result.Links;\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links');\n      }\n      if (links.length === 0) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result);\n        return;\n      }\n      yield* links.map(mapLink);\n    }\n  };\n}\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n    case 2:\n      return 'file';\n    default:\n      return 'file';\n  }\n}","map":{"version":3,"names":["CID","createStat","toUrlSearchParams","createLs","client","ls","path","options","pathStr","Uint8Array","decode","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","cid","parse","entry","name","Name","size","Size","type","typeOf","res","post","signal","searchParams","arg","headers","result","ndjson","Objects","Error","links","Links","Array","isArray","length","map","Type"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/ls.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { createStat } from './files/stat.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport type { IPFSEntry, KuboRPCClient } from './index.js'\nimport type { HTTPRPCClient } from './lib/core.js'\n\nexport function createLs (client: HTTPRPCClient): KuboRPCClient['ls'] {\n  return async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    async function mapLink (link: { Hash: string, Name: string, Size: number }): Promise<any> {\n      let hash: any = link.Hash\n\n      if (hash.includes('/') === true) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') === true ? hash : `/ipfs/${hash}`\n        const stats = await createStat(client)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      const entry: IPFSEntry = {\n        name: link.Name,\n        path: pathStr + (link.Name != null ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      return entry\n    }\n\n    const res = await client.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (result == null) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (result == null) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (links.length === 0) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n}\n\nfunction typeOf (link: any): 'dir' | 'file' {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,iBAAiB,QAAQ,+BAA+B;AAIjE,OAAM,SAAUC,QAAQA,CAAEC,MAAqB;EAC7C,OAAO,gBAAiBC,EAAEA,CAAEC,IAAI,EAAEC,OAAO,GAAG,EAAE;IAC5C,MAAMC,OAAO,GAAG,GAAGF,IAAI,YAAYG,UAAU,GAAGT,GAAG,CAACU,MAAM,CAACJ,IAAI,CAAC,GAAGA,IAAI,EAAE;IAEzE,eAAeK,OAAOA,CAAEC,IAAkD;MACxE,IAAIC,IAAI,GAAQD,IAAI,CAACE,IAAI;MAEzB,IAAID,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;QAC/B;QACA,MAAMC,QAAQ,GAAGH,IAAI,CAACI,UAAU,CAAC,QAAQ,CAAC,KAAK,IAAI,GAAGJ,IAAI,GAAG,SAASA,IAAI,EAAE;QAC5E,MAAMK,KAAK,GAAG,MAAMjB,UAAU,CAACG,MAAM,CAAC,CAACY,QAAQ,CAAC;QAEhDH,IAAI,GAAGK,KAAK,CAACC,GAAG;MAClB,CAAC,MAAM;QACLN,IAAI,GAAGb,GAAG,CAACoB,KAAK,CAACP,IAAI,CAAC;MACxB;MAEA,MAAMQ,KAAK,GAAc;QACvBC,IAAI,EAAEV,IAAI,CAACW,IAAI;QACfjB,IAAI,EAAEE,OAAO,IAAII,IAAI,CAACW,IAAI,IAAI,IAAI,GAAG,IAAIX,IAAI,CAACW,IAAI,EAAE,GAAG,EAAE,CAAC;QAC1DC,IAAI,EAAEZ,IAAI,CAACa,IAAI;QACfN,GAAG,EAAEN,IAAI;QACTa,IAAI,EAAEC,MAAM,CAACf,IAAI;OAClB;MAED,OAAOS,KAAK;IACd;IAEA,MAAMO,GAAG,GAAG,MAAMxB,MAAM,CAACyB,IAAI,CAAC,IAAI,EAAE;MAClCC,MAAM,EAAEvB,OAAO,CAACuB,MAAM;MACtBC,YAAY,EAAE7B,iBAAiB,CAAC;QAC9B8B,GAAG,EAAExB,OAAO;QACZ,GAAGD;OACJ,CAAC;MACF0B,OAAO,EAAE1B,OAAO,CAAC0B;KAClB,CAAC;IAEF,WAAW,IAAIC,MAAM,IAAIN,GAAG,CAACO,MAAM,EAAE,EAAE;MACrCD,MAAM,GAAGA,MAAM,CAACE,OAAO;MAEvB,IAAIF,MAAM,IAAI,IAAI,EAAE;QAClB,MAAM,IAAIG,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEAH,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC;MAClB,IAAIA,MAAM,IAAI,IAAI,EAAE;QAClB,MAAM,IAAIG,KAAK,CAAC,uCAAuC,CAAC;MAC1D;MAEA,MAAMC,KAAK,GAAGJ,MAAM,CAACK,KAAK;MAC1B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;QACzB,MAAM,IAAID,KAAK,CAAC,gDAAgD,CAAC;MACnE;MAEA,IAAIC,KAAK,CAACI,MAAM,KAAK,CAAC,EAAE;QACtB;QACA,MAAM/B,OAAO,CAACuB,MAAM,CAAC;QAErB;MACF;MAEA,OAAQI,KAAK,CAACK,GAAG,CAAChC,OAAO,CAAC;IAC5B;EACF,CAAC;AACH;AAEA,SAASgB,MAAMA,CAAEf,IAAS;EACxB,QAAQA,IAAI,CAACgC,IAAI;IACf,KAAK,CAAC;IACN,KAAK,CAAC;MACJ,OAAO,KAAK;IACd,KAAK,CAAC;MACJ,OAAO,MAAM;IACf;MACE,OAAO,MAAM;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}