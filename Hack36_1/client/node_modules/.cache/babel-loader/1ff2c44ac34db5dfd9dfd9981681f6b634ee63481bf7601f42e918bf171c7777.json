{"ast":null,"code":"/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n */\nexport function anySignal(signals) {\n  const controller = new globalThis.AbortController();\n  function onAbort() {\n    controller.abort();\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort);\n      }\n    }\n  }\n  for (const signal of signals) {\n    if (signal?.aborted === true) {\n      onAbort();\n      break;\n    }\n    if (signal?.addEventListener != null) {\n      signal.addEventListener('abort', onAbort);\n    }\n  }\n  function clear() {\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort);\n      }\n    }\n  }\n  const signal = controller.signal;\n  signal.clear = clear;\n  return signal;\n}","map":{"version":3,"names":["anySignal","signals","controller","globalThis","AbortController","onAbort","abort","signal","removeEventListener","aborted","addEventListener","clear"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/any-signal/src/index.ts"],"sourcesContent":["\nexport interface ClearableSignal extends AbortSignal {\n  clear: () => void\n}\n\n/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n */\nexport function anySignal (signals: Array<AbortSignal | undefined | null>): ClearableSignal {\n  const controller = new globalThis.AbortController()\n\n  function onAbort (): void {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort)\n      }\n    }\n  }\n\n  for (const signal of signals) {\n    if (signal?.aborted === true) {\n      onAbort()\n      break\n    }\n\n    if (signal?.addEventListener != null) {\n      signal.addEventListener('abort', onAbort)\n    }\n  }\n\n  function clear (): void {\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort)\n      }\n    }\n  }\n\n  const signal = controller.signal as ClearableSignal\n  signal.clear = clear\n\n  return signal\n}\n"],"mappings":"AAKA;;;;AAIA,OAAM,SAAUA,SAASA,CAAEC,OAA8C;EACvE,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAACC,eAAe,EAAE;EAEnD,SAASC,OAAOA,CAAA;IACdH,UAAU,CAACI,KAAK,EAAE;IAElB,KAAK,MAAMC,MAAM,IAAIN,OAAO,EAAE;MAC5B,IAAIM,MAAM,EAAEC,mBAAmB,IAAI,IAAI,EAAE;QACvCD,MAAM,CAACC,mBAAmB,CAAC,OAAO,EAAEH,OAAO,CAAC;;;EAGlD;EAEA,KAAK,MAAME,MAAM,IAAIN,OAAO,EAAE;IAC5B,IAAIM,MAAM,EAAEE,OAAO,KAAK,IAAI,EAAE;MAC5BJ,OAAO,EAAE;MACT;;IAGF,IAAIE,MAAM,EAAEG,gBAAgB,IAAI,IAAI,EAAE;MACpCH,MAAM,CAACG,gBAAgB,CAAC,OAAO,EAAEL,OAAO,CAAC;;;EAI7C,SAASM,KAAKA,CAAA;IACZ,KAAK,MAAMJ,MAAM,IAAIN,OAAO,EAAE;MAC5B,IAAIM,MAAM,EAAEC,mBAAmB,IAAI,IAAI,EAAE;QACvCD,MAAM,CAACC,mBAAmB,CAAC,OAAO,EAAEH,OAAO,CAAC;;;EAGlD;EAEA,MAAME,MAAM,GAAGL,UAAU,CAACK,MAAyB;EACnDA,MAAM,CAACI,KAAK,GAAGA,KAAK;EAEpB,OAAOJ,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}