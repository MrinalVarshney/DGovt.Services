{"ast":null,"code":"import { createFindPeer } from './find-peer.js';\nimport { createFindProvs } from './find-provs.js';\nimport { createGet } from './get.js';\nimport { createProvide } from './provide.js';\nimport { createPut } from './put.js';\nexport function createRouting(client) {\n  return {\n    findPeer: createFindPeer(client),\n    findProvs: createFindProvs(client),\n    get: createGet(client),\n    provide: createProvide(client),\n    put: createPut(client)\n  };\n}","map":{"version":3,"names":["createFindPeer","createFindProvs","createGet","createProvide","createPut","createRouting","client","findPeer","findProvs","get","provide","put"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/routing/index.ts"],"sourcesContent":["import { createFindPeer } from './find-peer.js'\nimport { createFindProvs } from './find-provs.js'\nimport { createGet } from './get.js'\nimport { createProvide } from './provide.js'\nimport { createPut } from './put.js'\nimport type { RoutingQueryEvent } from '../dht/index.js'\nimport type { HTTPRPCOptions } from '../index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\nimport type { PeerId } from '@libp2p/interface'\nimport type { CID } from 'multiformats/cid'\n\nexport interface RoutingFindProvsOptions extends HTTPRPCOptions {\n  /**\n   * How many providers to find\n   *\n   * @default 20\n   */\n  numProviders?: number\n}\n\nexport interface RoutingPutOptions extends HTTPRPCOptions {\n  /**\n   * When offline, save the IPNS record to the local datastore without\n   * broadcasting to the network instead of simply failing\n   */\n  allowOffline?: boolean\n}\n\nexport interface RoutingProvideOptions extends HTTPRPCOptions {\n  /**\n   * Recursively provide entire graph.\n   */\n  recursive?: boolean\n}\n\nexport interface RoutingAPI {\n  findPeer(peerId: string | PeerId, options?: HTTPRPCOptions): AsyncIterable<RoutingQueryEvent>\n  findProvs(key: string | CID, options?: RoutingFindProvsOptions): AsyncIterable<RoutingQueryEvent>\n  get(key: string | Uint8Array, options?: HTTPRPCOptions): AsyncIterable<RoutingQueryEvent>\n  put(key: string | Uint8Array, value: Uint8Array, options?: RoutingPutOptions): AsyncIterable<RoutingQueryEvent>\n  provide(key: string | string[] | CID | CID[], options?: RoutingProvideOptions): AsyncIterable<RoutingQueryEvent>\n}\n\nexport function createRouting (client: HTTPRPCClient): RoutingAPI {\n  return {\n    findPeer: createFindPeer(client),\n    findProvs: createFindProvs(client),\n    get: createGet(client),\n    provide: createProvide(client),\n    put: createPut(client)\n  }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,eAAe,QAAQ,iBAAiB;AACjD,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,SAAS,QAAQ,UAAU;AAuCpC,OAAM,SAAUC,aAAaA,CAAEC,MAAqB;EAClD,OAAO;IACLC,QAAQ,EAAEP,cAAc,CAACM,MAAM,CAAC;IAChCE,SAAS,EAAEP,eAAe,CAACK,MAAM,CAAC;IAClCG,GAAG,EAAEP,SAAS,CAACI,MAAM,CAAC;IACtBI,OAAO,EAAEP,aAAa,CAACG,MAAM,CAAC;IAC9BK,GAAG,EAAEP,SAAS,CAACE,MAAM;GACtB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}