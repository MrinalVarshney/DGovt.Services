{"ast":null,"code":"import { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport function createSet(client) {\n  return async function set(key, value, options = {}) {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await client.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n}\nfunction encodeParam(key, value) {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n}","map":{"version":3,"names":["toUrlSearchParams","createSet","client","set","key","value","options","Error","params","encodeParam","res","post","signal","searchParams","headers","text","arg","toString","bool","JSON","stringify","json"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/config/set.ts"],"sourcesContent":["import { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport type { ConfigAPI } from './index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport function createSet (client: HTTPRPCClient): ConfigAPI['set'] {\n  return async function set (key, value, options = {}) {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await client.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n}\n\nfunction encodeParam (key: any, value: any): any {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,gCAAgC;AAIlE,OAAM,SAAUC,SAASA,CAAEC,MAAqB;EAC9C,OAAO,eAAeC,GAAGA,CAAEC,GAAG,EAAEC,KAAK,EAAEC,OAAO,GAAG,EAAE;IACjD,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIG,KAAK,CAAC,kBAAkB,CAAC;IACrC;IAEA,MAAMC,MAAM,GAAG;MACb,GAAGF,OAAO;MACV,GAAGG,WAAW,CAACL,GAAG,EAAEC,KAAK;KAC1B;IAED,MAAMK,GAAG,GAAG,MAAMR,MAAM,CAACS,IAAI,CAAC,QAAQ,EAAE;MACtCC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEb,iBAAiB,CAACQ,MAAM,CAAC;MACvCM,OAAO,EAAER,OAAO,CAACQ;KAClB,CAAC;IAEF,MAAMJ,GAAG,CAACK,IAAI,EAAE;EAClB,CAAC;AACH;AAEA,SAASN,WAAWA,CAAEL,GAAQ,EAAEC,KAAU;EACxC,QAAQ,OAAOA,KAAK;IAClB,KAAK,SAAS;MACZ,OAAO;QAAEW,GAAG,EAAE,CAACZ,GAAG,EAAEC,KAAK,CAACY,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAI,CAAE;IACrD,KAAK,QAAQ;MACX,OAAO;QAAEF,GAAG,EAAE,CAACZ,GAAG,EAAEC,KAAK;MAAC,CAAE;IAC9B;MACE,OAAO;QAAEW,GAAG,EAAE,CAACZ,GAAG,EAAEe,IAAI,CAACC,SAAS,CAACf,KAAK,CAAC,CAAC;QAAEgB,IAAI,EAAE;MAAI,CAAE;EAC5D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}