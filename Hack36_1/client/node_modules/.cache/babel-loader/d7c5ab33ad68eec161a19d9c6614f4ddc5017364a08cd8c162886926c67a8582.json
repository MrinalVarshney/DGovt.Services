{"ast":null,"code":"import { createAddAll } from './add-all.js';\nimport { createAdd } from './add.js';\nimport { createLs } from './ls.js';\nimport { createRemote } from './remote/index.js';\nimport { createRmAll } from './rm-all.js';\nimport { createRm } from './rm.js';\nexport function createPin(client) {\n  return {\n    addAll: createAddAll(client),\n    add: createAdd(client),\n    ls: createLs(client),\n    rmAll: createRmAll(client),\n    rm: createRm(client),\n    remote: createRemote(client)\n  };\n}","map":{"version":3,"names":["createAddAll","createAdd","createLs","createRemote","createRmAll","createRm","createPin","client","addAll","add","ls","rmAll","rm","remote"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/pin/index.ts"],"sourcesContent":["import { createAddAll } from './add-all.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRemote, type PinRemoteAPI } from './remote/index.js'\nimport { createRmAll } from './rm-all.js'\nimport { createRm } from './rm.js'\nimport type { AwaitIterable, HTTPRPCOptions } from '../index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\nimport type { CID } from 'multiformats/cid'\n\nexport interface PinAddOptions extends HTTPRPCOptions {\n  /**\n   * If true, pin all blocked linked to from the pinned CID\n   */\n  recursive?: boolean\n\n  /**\n   * Whether to preload all blocks pinned during this operation\n   */\n  preload?: boolean\n\n  /**\n   * Internal option used to control whether to create a repo write lock during a pinning operation\n   */\n  lock?: boolean\n}\n\nexport interface PinAddAllOptions extends HTTPRPCOptions {\n  /**\n   * Whether to preload all blocks pinned during this operation\n   */\n  preload?: boolean\n\n  /**\n   * Internal option used to control whether to create a repo write lock during a pinning operation\n   */\n  lock?: boolean\n}\n\nexport type PinAddInput = CID | PinAddInputWithOptions\n\nexport interface PinAddInputWithOptions {\n  /**\n   * A CID to pin - nb. you must pass either `cid` or `path`, not both\n   */\n  cid?: CID\n\n  /**\n   * An IPFS path to pin - nb. you must pass either `cid` or `path`, not both\n   */\n  path?: string\n\n  /**\n   * If true, pin all blocked linked to from the pinned CID\n   */\n  recursive?: boolean\n\n  /**\n   * A human readable string to store with this pin\n   */\n  comments?: string\n}\n\nexport type PinType = 'recursive' | 'direct' | 'indirect' | 'all'\n\nexport type PinQueryType = 'recursive' | 'direct' | 'indirect' | 'all'\n\nexport interface PinLsOptions extends HTTPRPCOptions {\n  paths?: CID | CID[] | string | string[]\n  type?: PinQueryType\n}\n\nexport interface PinLsResult {\n  cid: CID\n  type: PinType | string\n  metadata?: Record<string, any>\n}\n\nexport interface PinRmOptions extends HTTPRPCOptions {\n  recursive?: boolean\n}\n\nexport interface PinRmAllInput {\n  cid?: CID\n  path?: string\n  recursive?: boolean\n}\n\nexport interface PinAPI {\n  /**\n   * Adds an IPFS block to the pinset and also stores it to the IPFS\n   * repo. pinset is the set of hashes currently pinned (not gc'able)\n   *\n   * @example\n   * ```js\n   * const cid = CID.parse('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * const pinned of ipfs.pin.add(cid))\n   * console.log(pinned)\n   * // Logs:\n   * // CID('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * ```\n   */\n  add(cid: string | CID, options?: PinAddOptions): Promise<CID>\n\n  /**\n   * Adds multiple IPFS blocks to the pinset and also stores it to the IPFS\n   * repo. pinset is the set of hashes currently pinned (not gc'able)\n   *\n   * @example\n   * ```js\n   * const cid = CID.parse('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * for await (const cid of ipfs.pin.addAll([cid])) {\n   *   console.log(cid)\n   * }\n   * // Logs:\n   * // CID('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * ```\n   */\n  addAll(source: AwaitIterable<PinAddInput>, options?: PinAddAllOptions): AsyncIterable<CID>\n\n  /**\n   * List all the objects pinned to local storage\n   *\n   * @example\n   * ```js\n   * for await (const { cid, type } of ipfs.pin.ls()) {\n   *   console.log({ cid, type })\n   * }\n   * // { cid: CID(Qmc5XkteJdb337s7VwFBAGtiaoj2QCEzyxtNRy3iMudc3E), type: 'recursive' }\n   * // { cid: CID(QmZbj5ruYneZb8FuR9wnLqJCpCXMQudhSdWhdhp5U1oPWJ), type: 'indirect' }\n   * // { cid: CID(QmSo73bmN47gBxMNqbdV6rZ4KJiqaArqJ1nu5TvFhqqj1R), type: 'indirect' }\n   *\n   * const paths = [\n   *   CID.parse('Qmc5..'),\n   *   CID.parse('QmZb..'),\n   *   CID.parse('QmSo..')\n   * ]\n   * for await (const { cid, type } of ipfs.pin.ls({ paths })) {\n   *   console.log({ cid, type })\n   * }\n   * // { cid: CID(Qmc5XkteJdb337s7VwFBAGtiaoj2QCEzyxtNRy3iMudc3E), type: 'recursive' }\n   * // { cid: CID(QmZbj5ruYneZb8FuR9wnLqJCpCXMQudhSdWhdhp5U1oPWJ), type: 'indirect' }\n   * // { cid: CID(QmSo73bmN47gBxMNqbdV6rZ4KJiqaArqJ1nu5TvFhqqj1R), type: 'indirect' }\n   * ```\n   */\n  ls(options?: PinLsOptions): AsyncIterable<PinLsResult>\n\n  /**\n   * Unpin this block from your repo\n   *\n   * @example\n   * ```js\n   * const cid = CID.parse('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * const result = await ipfs.pin.rm(cid)\n   * console.log(result)\n   * // prints the CID that was unpinned\n   * // CID('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * ```\n   */\n  rm(ipfsPath: string | CID, options?: PinRmOptions): Promise<CID>\n\n  /**\n   * Unpin one or more blocks from your repo\n   *\n   * @example\n   * ```js\n   * const source = [\n   *   CID.parse('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * ]\n   * for await (const cid of ipfs.pin.rmAll(source)) {\n   *   console.log(cid)\n   * }\n   * // prints the CIDs that were unpinned\n   * // CID('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * ```\n   */\n  rmAll(source: AwaitIterable<PinRmAllInput>, options?: HTTPRPCOptions): AsyncIterable<CID>\n\n  remote: PinRemoteAPI\n}\n\nexport function createPin (client: HTTPRPCClient): PinAPI {\n  return {\n    addAll: createAddAll(client),\n    add: createAdd(client),\n    ls: createLs(client),\n    rmAll: createRmAll(client),\n    rm: createRm(client),\n    remote: createRemote(client)\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,cAAc;AAC3C,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,YAAY,QAA2B,mBAAmB;AACnE,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,QAAQ,SAAS;AAgLlC,OAAM,SAAUC,SAASA,CAAEC,MAAqB;EAC9C,OAAO;IACLC,MAAM,EAAER,YAAY,CAACO,MAAM,CAAC;IAC5BE,GAAG,EAAER,SAAS,CAACM,MAAM,CAAC;IACtBG,EAAE,EAAER,QAAQ,CAACK,MAAM,CAAC;IACpBI,KAAK,EAAEP,WAAW,CAACG,MAAM,CAAC;IAC1BK,EAAE,EAAEP,QAAQ,CAACE,MAAM,CAAC;IACpBM,MAAM,EAAEV,YAAY,CAACI,MAAM;GAC5B;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}