{"ast":null,"code":"var _jsxFileName = \"/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/src/Contract_Instances/Instances.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport govBodyABI from \"../ABI/govBody.json\";\nimport signUpABI from \"../ABI/signUpVerifier.json\";\nimport storageABI from \"../ABI/storage.json\";\n// Create the Web3 context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => {\n  _s();\n  return useContext(Web3Context);\n};\n\n// Web3 Provider component\n_s(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [web3Local, setWeb3Local] = useState(null);\n  const [web3Wallet, setWeb3Wallet] = useState(null);\n  const [govContract, setgovContract] = useState(null);\n  const [signupContract, setSignupContract] = useState(null);\n  const [storageContract, setStorageContract] = useState(null);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const govBodyContractAddress = \"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\";\n  const signUpVerifierContractAddress = \"0x9fe46736679d2d9a65f0992f2272de9f3c7fa6e0\";\n  const storageContractAddress = \"0xdc64a140aa3e981100a9beca4e685f962f0cf6c9\";\n\n  // Initialize Web3 for local Hardhat node\n  useEffect(() => {\n    const initWeb3Local = async () => {\n      const web3Instance = new Web3(\"http://127.0.0.1:8545\"); // Assuming Hardhat is running on port 8545\n      setWeb3Local(web3Instance);\n      console.log(\"Web3 for local node initialized.\");\n    };\n\n    // Connect to user's wallet\n    const connectWallet = async () => {\n      try {\n        if (!web3Wallet) {\n          if (window.ethereum) {\n            const web3Instance = new Web3(window.ethereum);\n            await window.ethereum.enable(); // Request user's permission to connect\n            setWeb3Wallet(web3Instance);\n            console.log(\"Web3 for wallet connected.\");\n          } else {\n            console.log(\"MetaMask not found. Please install MetaMask to connect your wallet.\");\n          }\n        }\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n      }\n    };\n    initWeb3Local();\n    connectWallet();\n  }, []); // Only run once on component mount\n\n  // Load contract when web3Local changes\n  useEffect(() => {\n    const loadContract = async () => {\n      if (web3Local) {\n        var contractInstance = new web3Local.eth.Contract(govBodyABI.abi, govBodyContractAddress);\n        setgovContract(contractInstance);\n        contractInstance = new web3Local.eth.Contract(signUpABI.abi, signUpVerifierContractAddress);\n        setSignupContract(contractInstance);\n        contractInstance = new web3Local.eth.Contract(storageABI.abi, storageContractAddress);\n        setStorageContract(contractInstance);\n        console.log(\"Govt and auth contracts loaded\");\n      }\n    };\n    loadContract();\n  }, [web3Local]);\n  useEffect(() => {\n    const loadContract = async () => {\n      if (web3Local) {\n        var contractInstance = new web3Local.eth.Contract(govBodyABI.abi, govBodyContractAddress);\n        setgovContract(contractInstance);\n        contractInstance = new web3Local.eth.Contract(signUpABI.abi, signUpVerifierContractAddress);\n        setSignupContract(contractInstance);\n        console.log(\"Govt and auth contracts loaded\");\n      }\n    };\n    loadContract();\n  }, [web3Local]);\n  const values = {\n    web3Local,\n    web3Wallet,\n    govContract,\n    signupContract,\n    walletAddress,\n    storageContract,\n    storageContractAddress,\n    setWalletAddress\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 10\n  }, this);\n};\n_s2(Web3Provider, \"+2bJ+pb62vQJoG0WtVgRcpEG9Pw=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","Web3","govBodyABI","signUpABI","storageABI","jsxDEV","_jsxDEV","Web3Context","useWeb3","_s","Web3Provider","children","_s2","web3Local","setWeb3Local","web3Wallet","setWeb3Wallet","govContract","setgovContract","signupContract","setSignupContract","storageContract","setStorageContract","walletAddress","setWalletAddress","govBodyContractAddress","signUpVerifierContractAddress","storageContractAddress","initWeb3Local","web3Instance","console","log","connectWallet","window","ethereum","enable","error","loadContract","contractInstance","eth","Contract","abi","values","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/src/Contract_Instances/Instances.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport govBodyABI from \"../ABI/govBody.json\";\r\nimport signUpABI from \"../ABI/signUpVerifier.json\";\r\nimport storageABI from\"../ABI/storage.json\"\r\n// Create the Web3 context\r\nconst Web3Context = createContext();\r\n\r\n// Custom hook to use the Web3 context\r\nexport const useWeb3 = () => useContext(Web3Context);\r\n\r\n// Web3 Provider component\r\nexport const Web3Provider = ({ children }) => {\r\n  const [web3Local, setWeb3Local] = useState(null);\r\n  const [web3Wallet, setWeb3Wallet] = useState(null);\r\n  const [govContract, setgovContract] = useState(null);\r\n  const [signupContract, setSignupContract] = useState(null);\r\n  const [storageContract,setStorageContract] = useState(null);\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const govBodyContractAddress = \"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\";\r\n  const signUpVerifierContractAddress =\"0x9fe46736679d2d9a65f0992f2272de9f3c7fa6e0\";\r\n  const storageContractAddress = \"0xdc64a140aa3e981100a9beca4e685f962f0cf6c9\";\r\n\r\n\r\n  // Initialize Web3 for local Hardhat node\r\n  useEffect(() => {\r\n    const initWeb3Local = async () => {\r\n      const web3Instance = new Web3(\"http://127.0.0.1:8545\"); // Assuming Hardhat is running on port 8545\r\n      setWeb3Local(web3Instance);\r\n      console.log(\"Web3 for local node initialized.\");\r\n    };\r\n\r\n    // Connect to user's wallet\r\n    const connectWallet = async () => {\r\n      try {\r\n        if (!web3Wallet) {\r\n          if (window.ethereum) {\r\n            const web3Instance = new Web3(window.ethereum);\r\n            await window.ethereum.enable(); // Request user's permission to connect\r\n            setWeb3Wallet(web3Instance);\r\n            console.log(\"Web3 for wallet connected.\");\r\n          } else {\r\n            console.log(\r\n              \"MetaMask not found. Please install MetaMask to connect your wallet.\"\r\n            );\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error connecting wallet:\", error);\r\n      }\r\n    };\r\n\r\n    initWeb3Local();\r\n    connectWallet();\r\n  }, []); // Only run once on component mount\r\n\r\n  // Load contract when web3Local changes\r\n  useEffect(() => {\r\n    const loadContract = async () => {\r\n      if (web3Local) {\r\n        var contractInstance = new web3Local.eth.Contract(\r\n          govBodyABI.abi,\r\n          govBodyContractAddress\r\n        );\r\n\r\n        setgovContract(contractInstance);\r\n        contractInstance = new web3Local.eth.Contract(\r\n          signUpABI.abi,\r\n          signUpVerifierContractAddress\r\n        );\r\n        setSignupContract(contractInstance);\r\n        contractInstance = new web3Local.eth.Contract(\r\n          storageABI.abi,\r\n          storageContractAddress\r\n        );\r\n        setStorageContract(contractInstance);\r\n        console.log(\"Govt and auth contracts loaded\");\r\n      }\r\n    };\r\n\r\n    loadContract();\r\n  }, [web3Local]);\r\n\r\n\r\n  useEffect(() => {\r\n    const loadContract = async () => {\r\n      if (web3Local) {\r\n        var contractInstance = new web3Local.eth.Contract(\r\n          govBodyABI.abi,\r\n          govBodyContractAddress\r\n        );\r\n\r\n        setgovContract(contractInstance);\r\n        contractInstance = new web3Local.eth.Contract(\r\n          signUpABI.abi,\r\n          signUpVerifierContractAddress\r\n        );\r\n        setSignupContract(contractInstance);\r\n        console.log(\"Govt and auth contracts loaded\");\r\n      }\r\n    };\r\n\r\n    loadContract();\r\n  }, [web3Local]);\r\n\r\n\r\n  const values = {\r\n    web3Local,\r\n    web3Wallet,\r\n    govContract,\r\n    signupContract,\r\n    walletAddress,\r\n    storageContract,\r\n    storageContractAddress,\r\n    setWalletAddress,\r\n  };\r\n\r\n  return <Web3Context.Provider value={values}>{children}</Web3Context.Provider>;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}