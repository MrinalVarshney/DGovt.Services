{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nfunction toPin(type, cid, metadata) {\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  };\n  if (metadata != null) {\n    pin.metadata = metadata;\n  }\n  return pin;\n}\nexport function createLs(client) {\n  return async function* ls(options = {}) {\n    let paths = [];\n    if (options.paths != null) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n    const res = await client.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys != null) {\n        // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n        return;\n      }\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  };\n}","map":{"version":3,"names":["CID","toUrlSearchParams","toPin","type","cid","metadata","pin","parse","createLs","client","ls","options","paths","Array","isArray","res","post","signal","searchParams","arg","map","path","stream","headers","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/pin/ls.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport type { PinAPI, PinLsResult } from './index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nfunction toPin (type: string, cid: string, metadata: Record<string, string>): PinLsResult {\n  const pin: PinLsResult = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata != null) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nexport function createLs (client: HTTPRPCClient): PinAPI['ls'] {\n  return async function * ls (options = {}) {\n    let paths: any[] = []\n\n    if (options.paths != null) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await client.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys != null) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,iBAAiB,QAAQ,gCAAgC;AAIlE,SAASC,KAAKA,CAAEC,IAAY,EAAEC,GAAW,EAAEC,QAAgC;EACzE,MAAMC,GAAG,GAAgB;IACvBH,IAAI;IACJC,GAAG,EAAEJ,GAAG,CAACO,KAAK,CAACH,GAAG;GACnB;EAED,IAAIC,QAAQ,IAAI,IAAI,EAAE;IACpBC,GAAG,CAACD,QAAQ,GAAGA,QAAQ;EACzB;EAEA,OAAOC,GAAG;AACZ;AAEA,OAAM,SAAUE,QAAQA,CAAEC,MAAqB;EAC7C,OAAO,gBAAiBC,EAAEA,CAAEC,OAAO,GAAG,EAAE;IACtC,IAAIC,KAAK,GAAU,EAAE;IAErB,IAAID,OAAO,CAACC,KAAK,IAAI,IAAI,EAAE;MACzBA,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,KAAK,CAAC,GAAGD,OAAO,CAACC,KAAK,GAAG,CAACD,OAAO,CAACC,KAAK,CAAC;IACxE;IAEA,MAAMG,GAAG,GAAG,MAAMN,MAAM,CAACO,IAAI,CAAC,QAAQ,EAAE;MACtCC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEjB,iBAAiB,CAAC;QAC9B,GAAGU,OAAO;QACVQ,GAAG,EAAEP,KAAK,CAACQ,GAAG,CAACC,IAAI,IAAI,GAAGA,IAAI,EAAE,CAAC;QACjCC,MAAM,EAAE;OACT,CAAC;MACFC,OAAO,EAAEZ,OAAO,CAACY;KAClB,CAAC;IAEF,WAAW,MAAMjB,GAAG,IAAIS,GAAG,CAACS,MAAM,EAAE,EAAE;MACpC,IAAIlB,GAAG,CAACmB,IAAI,IAAI,IAAI,EAAE;QAAE;QACtB,KAAK,MAAMrB,GAAG,IAAIsB,MAAM,CAACC,IAAI,CAACrB,GAAG,CAACmB,IAAI,CAAC,EAAE;UACvC,MAAMvB,KAAK,CAACI,GAAG,CAACmB,IAAI,CAACrB,GAAG,CAAC,CAACwB,IAAI,EAAExB,GAAG,EAAEE,GAAG,CAACmB,IAAI,CAACrB,GAAG,CAAC,CAACyB,QAAQ,CAAC;QAC9D;QACA;MACF;MAEA,MAAM3B,KAAK,CAACI,GAAG,CAACsB,IAAI,EAAEtB,GAAG,CAACwB,GAAG,EAAExB,GAAG,CAACuB,QAAQ,CAAC;IAC9C;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}