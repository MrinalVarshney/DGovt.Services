{"ast":null,"code":"import * as dagCBOR from '@ipld/dag-cbor';\nimport * as dagJSON from '@ipld/dag-json';\nimport * as dagPB from '@ipld/dag-pb';\nimport * as dagJOSE from 'dag-jose';\nimport { bases, hashes, codecs } from 'multiformats/basics';\nimport { identity } from 'multiformats/hashes/identity';\nimport { createAddAll } from './add-all.js';\nimport { createAdd } from './add.js';\nimport { createBitswap } from './bitswap/index.js';\nimport { createBlock } from './block/index.js';\nimport { createBootstrap } from './bootstrap/index.js';\nimport { createCat } from './cat.js';\nimport { createCommands } from './commands.js';\nimport { createConfig } from './config/index.js';\nimport { createDAG } from './dag/index.js';\nimport { createDHT } from './dht/index.js';\nimport { createDiag } from './diag/index.js';\nimport { createFiles } from './files/index.js';\nimport { createGetEndpointConfig } from './get-endpoint-config.js';\nimport { createGet } from './get.js';\nimport { createId } from './id.js';\nimport { createIsOnline } from './is-online.js';\nimport { createKey } from './key/index.js';\nimport { Client } from './lib/core.js';\nimport { Multibases } from './lib/multibases.js';\nimport { Multicodecs } from './lib/multicodecs.js';\nimport { Multihashes } from './lib/multihashes.js';\nimport { createLog } from './log/index.js';\nimport { createLs } from './ls.js';\nimport { createMount } from './mount.js';\nimport { createName } from './name/index.js';\nimport { createObject } from './object/index.js';\nimport { createPin } from './pin/index.js';\nimport { createPing } from './ping.js';\nimport { createPubsub } from './pubsub/index.js';\nimport { createRefs } from './refs/index.js';\nimport { createRepo } from './repo/index.js';\nimport { createResolve } from './resolve.js';\nimport { createRouting } from './routing/index.js';\nimport { createStats } from './stats/index.js';\nimport { createStop } from './stop.js';\nimport { createSwarm } from './swarm/index.js';\nimport { createVersion } from './version.js';\nclass KuboRPCClient {\n  bases;\n  codecs;\n  hashers;\n  bitswap;\n  block;\n  bootstrap;\n  config;\n  dag;\n  dht;\n  diag;\n  files;\n  key;\n  log;\n  name;\n  object;\n  pin;\n  pubsub;\n  refs;\n  repo;\n  routing;\n  stats;\n  swarm;\n  add;\n  addAll;\n  cat;\n  get;\n  ls;\n  id;\n  version;\n  stop;\n  ping;\n  resolve;\n  commands;\n  mount;\n  isOnline;\n  getEndpointConfig;\n  constructor(options) {\n    const client = new Client(options);\n    const id = {\n      name: identity.name,\n      code: identity.code,\n      encode: id => id,\n      decode: id => id\n    };\n    const multibaseCodecs = Object.values(bases);\n    (options.ipld?.bases ?? []).forEach(base => multibaseCodecs.push(base));\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld?.loadBase\n    });\n    const blockCodecs = Object.values(codecs);\n    [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat(options.ipld?.codecs ?? []).forEach(codec => {\n      blockCodecs.push(codec);\n    });\n    this.codecs = new Multicodecs({\n      codecs: blockCodecs,\n      loadCodec: options.ipld?.loadCodec\n    });\n    const multihashHashers = Object.values(hashes);\n    (options.ipld?.hashers ?? []).forEach(hasher => multihashHashers.push(hasher));\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld?.loadHasher\n    });\n    this.bitswap = createBitswap(client);\n    this.block = createBlock(client);\n    this.bootstrap = createBootstrap(client);\n    this.config = createConfig(client);\n    this.dag = createDAG(client, this.codecs);\n    this.dht = createDHT(client);\n    this.diag = createDiag(client);\n    this.files = createFiles(client);\n    this.key = createKey(client);\n    this.log = createLog(client);\n    this.name = createName(client);\n    this.object = createObject(client, this.codecs);\n    this.pin = createPin(client);\n    this.pubsub = createPubsub(client);\n    this.refs = createRefs(client);\n    this.repo = createRepo(client);\n    this.routing = createRouting(client);\n    this.stats = createStats(client);\n    this.swarm = createSwarm(client);\n    this.add = createAdd(client);\n    this.addAll = createAddAll(client);\n    this.cat = createCat(client);\n    this.get = createGet(client);\n    this.ls = createLs(client);\n    this.id = createId(client);\n    this.version = createVersion(client);\n    this.stop = createStop(client);\n    this.ping = createPing(client);\n    this.resolve = createResolve(client);\n    this.commands = createCommands(client);\n    this.mount = createMount(client);\n    this.isOnline = createIsOnline(client);\n    this.getEndpointConfig = createGetEndpointConfig(client);\n  }\n}\nexport function createKuboRPCClient(options) {\n  return new KuboRPCClient(options);\n}","map":{"version":3,"names":["dagCBOR","dagJSON","dagPB","dagJOSE","bases","hashes","codecs","identity","createAddAll","createAdd","createBitswap","createBlock","createBootstrap","createCat","createCommands","createConfig","createDAG","createDHT","createDiag","createFiles","createGetEndpointConfig","createGet","createId","createIsOnline","createKey","Client","Multibases","Multicodecs","Multihashes","createLog","createLs","createMount","createName","createObject","createPin","createPing","createPubsub","createRefs","createRepo","createResolve","createRouting","createStats","createStop","createSwarm","createVersion","KuboRPCClient","hashers","bitswap","block","bootstrap","config","dag","dht","diag","files","key","log","name","object","pin","pubsub","refs","repo","routing","stats","swarm","add","addAll","cat","get","ls","id","version","stop","ping","resolve","commands","mount","isOnline","getEndpointConfig","constructor","options","client","code","encode","decode","multibaseCodecs","Object","values","ipld","forEach","base","push","loadBase","blockCodecs","concat","codec","loadCodec","multihashHashers","hasher","loadHasher","createKuboRPCClient"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/client.ts"],"sourcesContent":["import * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagJOSE from 'dag-jose'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { identity } from 'multiformats/hashes/identity'\nimport { createAddAll } from './add-all.js'\nimport { createAdd } from './add.js'\nimport { createBitswap } from './bitswap/index.js'\nimport { createBlock } from './block/index.js'\nimport { createBootstrap } from './bootstrap/index.js'\nimport { createCat } from './cat.js'\nimport { createCommands } from './commands.js'\nimport { createConfig } from './config/index.js'\nimport { createDAG } from './dag/index.js'\nimport { createDHT } from './dht/index.js'\nimport { createDiag } from './diag/index.js'\nimport { createFiles } from './files/index.js'\nimport { createGetEndpointConfig } from './get-endpoint-config.js'\nimport { createGet } from './get.js'\nimport { createId } from './id.js'\nimport { createIsOnline } from './is-online.js'\nimport { createKey } from './key/index.js'\nimport { Client } from './lib/core.js'\nimport { Multibases } from './lib/multibases.js'\nimport { Multicodecs } from './lib/multicodecs.js'\nimport { Multihashes } from './lib/multihashes.js'\nimport { createLog } from './log/index.js'\nimport { createLs } from './ls.js'\nimport { createMount } from './mount.js'\nimport { createName } from './name/index.js'\nimport { createObject } from './object/index.js'\nimport { createPin } from './pin/index.js'\nimport { createPing } from './ping.js'\nimport { createPubsub } from './pubsub/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createRepo } from './repo/index.js'\nimport { createResolve } from './resolve.js'\nimport { createRouting } from './routing/index.js'\nimport { createStats } from './stats/index.js'\nimport { createStop } from './stop.js'\nimport { createSwarm } from './swarm/index.js'\nimport { createVersion } from './version.js'\nimport type { KuboRPCClient as KuboRPCClientInterface, Options } from './index.ts'\nimport type { MultibaseCodec } from 'multiformats/bases/interface'\nimport type { BlockCodec } from 'multiformats/codecs/interface'\nimport type { MultihashHasher } from 'multiformats/hashes/interface'\n\nclass KuboRPCClient implements KuboRPCClientInterface {\n  public bases: KuboRPCClientInterface['bases']\n  public codecs: KuboRPCClientInterface['codecs']\n  public hashers: KuboRPCClientInterface['hashers']\n\n  public bitswap: KuboRPCClientInterface['bitswap']\n  public block: KuboRPCClientInterface['block']\n  public bootstrap: KuboRPCClientInterface['bootstrap']\n  public config: KuboRPCClientInterface['config']\n  public dag: KuboRPCClientInterface['dag']\n  public dht: KuboRPCClientInterface['dht']\n  public diag: KuboRPCClientInterface['diag']\n  public files: KuboRPCClientInterface['files']\n  public key: KuboRPCClientInterface['key']\n  public log: KuboRPCClientInterface['log']\n  public name: KuboRPCClientInterface['name']\n  public object: KuboRPCClientInterface['object']\n  public pin: KuboRPCClientInterface['pin']\n  public pubsub: KuboRPCClientInterface['pubsub']\n  public refs: KuboRPCClientInterface['refs']\n  public repo: KuboRPCClientInterface['repo']\n  public routing: KuboRPCClientInterface['routing']\n  public stats: KuboRPCClientInterface['stats']\n  public swarm: KuboRPCClientInterface['swarm']\n\n  public add: KuboRPCClientInterface['add']\n  public addAll: KuboRPCClientInterface['addAll']\n  public cat: KuboRPCClientInterface['cat']\n  public get: KuboRPCClientInterface['get']\n  public ls: KuboRPCClientInterface['ls']\n  public id: KuboRPCClientInterface['id']\n  public version: KuboRPCClientInterface['version']\n  public stop: KuboRPCClientInterface['stop']\n  public ping: KuboRPCClientInterface['ping']\n  public resolve: KuboRPCClientInterface['resolve']\n  public commands: KuboRPCClientInterface['commands']\n  public mount: KuboRPCClientInterface['mount']\n  public isOnline: KuboRPCClientInterface['isOnline']\n  public getEndpointConfig: KuboRPCClientInterface['getEndpointConfig']\n\n  constructor (options: Options) {\n    const client = new Client(options)\n\n    const id: BlockCodec<any, any> = {\n      name: identity.name,\n      code: identity.code,\n      encode: (id) => id,\n      decode: (id) => id\n    }\n\n    const multibaseCodecs: Array<MultibaseCodec<string>> = Object.values(bases);\n    (options.ipld?.bases ?? []).forEach(base => multibaseCodecs.push(base))\n\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld?.loadBase\n    })\n\n    const blockCodecs: Array<BlockCodec<any, any>> = Object.values(codecs);\n    [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld?.codecs ?? [])).forEach(codec => {\n      blockCodecs.push(codec)\n    })\n\n    this.codecs = new Multicodecs({\n      codecs: blockCodecs,\n      loadCodec: options.ipld?.loadCodec\n    })\n\n    const multihashHashers: MultihashHasher[] = Object.values(hashes);\n    (options.ipld?.hashers ?? []).forEach(hasher => multihashHashers.push(hasher))\n\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld?.loadHasher\n    })\n\n    this.bitswap = createBitswap(client)\n    this.block = createBlock(client)\n    this.bootstrap = createBootstrap(client)\n    this.config = createConfig(client)\n    this.dag = createDAG(client, this.codecs)\n    this.dht = createDHT(client)\n    this.diag = createDiag(client)\n    this.files = createFiles(client)\n    this.key = createKey(client)\n    this.log = createLog(client)\n    this.name = createName(client)\n    this.object = createObject(client, this.codecs)\n    this.pin = createPin(client)\n    this.pubsub = createPubsub(client)\n    this.refs = createRefs(client)\n    this.repo = createRepo(client)\n    this.routing = createRouting(client)\n    this.stats = createStats(client)\n    this.swarm = createSwarm(client)\n\n    this.add = createAdd(client)\n    this.addAll = createAddAll(client)\n    this.cat = createCat(client)\n    this.get = createGet(client)\n    this.ls = createLs(client)\n    this.id = createId(client)\n    this.version = createVersion(client)\n    this.stop = createStop(client)\n    this.ping = createPing(client)\n    this.resolve = createResolve(client)\n    this.commands = createCommands(client)\n    this.mount = createMount(client)\n    this.isOnline = createIsOnline(client)\n    this.getEndpointConfig = createGetEndpointConfig(client)\n  }\n}\n\nexport function createKuboRPCClient (options: Options): KuboRPCClientInterface {\n  return new KuboRPCClient(options)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}