{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nconst log = logger('js-kubo-rpc-client:pubsub:subscribe');\nexport function createSubscribe(client, subsTracker) {\n  return async function subscribe(topic, handler, options = {}) {\n    options.signal = subsTracker.subscribe(topic, handler, options.signal);\n    let done;\n    let fail;\n    const result = new Promise((resolve, reject) => {\n      done = resolve;\n      fail = reject;\n    });\n    // In Firefox, the initial call to fetch does not resolve until some data\n    // is received. If this doesn't happen within 1 second assume success\n    const ffWorkaround = setTimeout(() => {\n      done();\n    }, 1000);\n    // Do this async to not block Firefox\n    void client.post('pubsub/sub', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: textToUrlSafeRpc(topic),\n        ...options\n      }),\n      headers: options.headers\n    }).catch(err => {\n      // Initial subscribe fail, ensure we clean up\n      subsTracker.unsubscribe(topic, handler);\n      fail(err);\n    }).then(response => {\n      clearTimeout(ffWorkaround);\n      if (response == null) {\n        // if there was no response, the subscribe failed\n        return;\n      }\n      void readMessages(response, {\n        onMessage: message => {\n          if (handler == null) {\n            return;\n          }\n          if (typeof handler === 'function') {\n            handler(message);\n            return;\n          }\n          if (typeof handler.handleEvent === 'function') {\n            handler.handleEvent(message);\n          }\n        },\n        onEnd: () => {\n          subsTracker.unsubscribe(topic, handler);\n        },\n        onError: options.onError\n      });\n      done();\n    });\n    return result;\n  };\n}\nasync function readMessages(response, {\n  onMessage,\n  onEnd,\n  onError\n}) {\n  onError = onError ?? log;\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (msg.from == null) {\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          });\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          });\n        }\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`;\n        onError(err, false, msg); // Not fatal\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true); // Fatal\n    }\n  } finally {\n    onEnd();\n  }\n}\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true;\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError';\n  }\n};","map":{"version":3,"names":["logger","peerIdFromString","textToUrlSafeRpc","rpcToText","rpcToBytes","rpcToBigInt","toUrlSearchParams","log","createSubscribe","client","subsTracker","subscribe","topic","handler","options","signal","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","message","handleEvent","onEnd","onError","msg","ndjson","from","seqno","type","data","sequenceNumber","topicIDs","key","signature","isAbortError","error","name"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/pubsub/subscribe.ts"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport type { PubSubAPI, PubsubApiErrorHandlerFn } from './index.js'\nimport type { SubscriptionTracker } from './subscription-tracker.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\nimport type { AbortError } from '../lib/errors.js'\nimport type { ExtendedResponse } from '../lib/http.js'\nimport type { Message } from '@libp2p/interface'\n\nconst log = logger('js-kubo-rpc-client:pubsub:subscribe')\n\nexport function createSubscribe (client: HTTPRPCClient, subsTracker: SubscriptionTracker): PubSubAPI['subscribe'] {\n  return async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n    options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n    let done: (value?: any) => void\n    let fail: (error: Error) => void\n\n    const result = new Promise<void>((resolve, reject) => {\n      done = resolve\n      fail = reject\n    })\n\n    // In Firefox, the initial call to fetch does not resolve until some data\n    // is received. If this doesn't happen within 1 second assume success\n    const ffWorkaround = setTimeout(() => {\n      done()\n    }, 1000)\n\n    // Do this async to not block Firefox\n    void client.post('pubsub/sub', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: textToUrlSafeRpc(topic),\n        ...options\n      }),\n      headers: options.headers\n    })\n      .catch((err) => {\n        // Initial subscribe fail, ensure we clean up\n        subsTracker.unsubscribe(topic, handler)\n\n        fail(err)\n      })\n      .then((response) => {\n        clearTimeout(ffWorkaround)\n\n        if (response == null) {\n          // if there was no response, the subscribe failed\n          return\n        }\n\n        void readMessages(response, {\n          onMessage: (message) => {\n            if (handler == null) {\n              return\n            }\n\n            if (typeof handler === 'function') {\n              handler(message)\n              return\n            }\n\n            if (typeof handler.handleEvent === 'function') {\n              handler.handleEvent(message)\n            }\n          },\n          onEnd: () => {\n            subsTracker.unsubscribe(topic, handler)\n          },\n          onError: options.onError\n        })\n\n        done()\n      })\n\n    return result\n  }\n}\n\ninterface ReadMessagesOptions {\n  onMessage(message: Message): void\n  onEnd(): void\n  onError?: PubsubApiErrorHandlerFn\n}\n\nasync function readMessages (response: ExtendedResponse, { onMessage, onEnd, onError }: ReadMessagesOptions): Promise<void> {\n  onError = onError ?? log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (msg.from == null) {\n          // eslint-disable-next-line no-continue\n          continue\n        }\n\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          })\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          })\n        }\n      } catch (err: any) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (err: any) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\nconst isAbortError = (error: any): error is AbortError => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}