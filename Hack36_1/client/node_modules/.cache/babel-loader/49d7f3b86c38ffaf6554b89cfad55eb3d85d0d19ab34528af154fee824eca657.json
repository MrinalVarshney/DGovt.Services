{"ast":null,"code":"import last from 'it-last';\nimport { createAddAll } from './add-all.js';\nimport { normaliseInput } from './lib/files/normalise-input-single.js';\nexport function createAdd(client) {\n  const all = createAddAll(client);\n  return async function add(input, options = {}) {\n    const source = normaliseInput(input);\n    const addAllPromise = all(source, options);\n    const result = await last(addAllPromise);\n    if (result == null) {\n      throw new Error('Invalid body');\n    }\n    return result;\n  };\n}","map":{"version":3,"names":["last","createAddAll","normaliseInput","createAdd","client","all","add","input","options","source","addAllPromise","result","Error"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/add.ts"],"sourcesContent":["import last from 'it-last'\nimport { createAddAll } from './add-all.js'\nimport { normaliseInput } from './lib/files/normalise-input-single.js'\nimport type { KuboRPCClient } from './index.js'\nimport type { HTTPRPCClient } from './lib/core.js'\n\nexport function createAdd (client: HTTPRPCClient): KuboRPCClient['add'] {\n  const all = createAddAll(client)\n\n  return async function add (input, options = {}) {\n    const source = normaliseInput(input)\n    const addAllPromise = all(source, options)\n    const result = await last(addAllPromise)\n\n    if (result == null) {\n      throw new Error('Invalid body')\n    }\n\n    return result\n  }\n}\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;AAC1B,SAASC,YAAY,QAAQ,cAAc;AAC3C,SAASC,cAAc,QAAQ,uCAAuC;AAItE,OAAM,SAAUC,SAASA,CAAEC,MAAqB;EAC9C,MAAMC,GAAG,GAAGJ,YAAY,CAACG,MAAM,CAAC;EAEhC,OAAO,eAAeE,GAAGA,CAAEC,KAAK,EAAEC,OAAO,GAAG,EAAE;IAC5C,MAAMC,MAAM,GAAGP,cAAc,CAACK,KAAK,CAAC;IACpC,MAAMG,aAAa,GAAGL,GAAG,CAACI,MAAM,EAAED,OAAO,CAAC;IAC1C,MAAMG,MAAM,GAAG,MAAMX,IAAI,CAACU,aAAa,CAAC;IAExC,IAAIC,MAAM,IAAI,IAAI,EAAE;MAClB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IACjC;IAEA,OAAOD,MAAM;EACf,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}