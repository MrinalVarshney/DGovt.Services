{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * Convert one value from an (async)iterator into another.\n *\n * @example\n *\n * ```javascript\n * import map from 'it-map'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const result = map(values, (val) => val++)\n *\n * console.info(result) // [1, 2, 3, 4, 5]\n * ```\n *\n * Async sources and transforms must be awaited:\n *\n * ```javascript\n * import map from 'it-map'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const result = await map(values(), async (val) => val++)\n *\n * console.info(result) // [1, 2, 3, 4, 5]\n * ```\n */\nimport peek from 'it-peekable';\nfunction isAsyncIterable(thing) {\n  return thing[Symbol.asyncIterator] != null;\n}\nfunction map(source, func) {\n  if (isAsyncIterable(source)) {\n    return async function* () {\n      for await (const val of source) {\n        yield func(val);\n      }\n    }();\n  }\n  // if mapping function returns a promise we have to return an async generator\n  const peekable = peek(source);\n  const {\n    value,\n    done\n  } = peekable.next();\n  if (done === true) {\n    return function* () {}();\n  }\n  const res = func(value);\n  // @ts-expect-error .then is not present on O\n  if (typeof res.then === 'function') {\n    return async function* () {\n      yield await res;\n      for await (const val of peekable) {\n        yield func(val);\n      }\n    }();\n  }\n  const fn = func;\n  return function* () {\n    yield res;\n    for (const val of peekable) {\n      yield fn(val);\n    }\n  }();\n}\nexport default map;","map":{"version":3,"names":["peek","isAsyncIterable","thing","Symbol","asyncIterator","map","source","func","val","peekable","value","done","next","res","then","fn"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/it-map/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * Convert one value from an (async)iterator into another.\n *\n * @example\n *\n * ```javascript\n * import map from 'it-map'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const result = map(values, (val) => val++)\n *\n * console.info(result) // [1, 2, 3, 4, 5]\n * ```\n *\n * Async sources and transforms must be awaited:\n *\n * ```javascript\n * import map from 'it-map'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const result = await map(values(), async (val) => val++)\n *\n * console.info(result) // [1, 2, 3, 4, 5]\n * ```\n */\n\nimport peek from 'it-peekable'\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Takes an (async) iterable and returns one with each item mapped by the passed\n * function\n */\nfunction map <I, O> (source: Iterable<I>, func: (val: I) => Promise<O>): AsyncGenerator<O, void, undefined>\nfunction map <I, O> (source: Iterable<I>, func: (val: I) => O): Generator<O, void, undefined>\nfunction map <I, O> (source: AsyncIterable<I> | Iterable<I>, func: (val: I) => O | Promise<O>): AsyncGenerator<O, void, undefined>\nfunction map <I, O> (source: AsyncIterable<I> | Iterable<I>, func: (val: I) => O | Promise<O>): AsyncGenerator<O, void, undefined> | Generator<O, void, undefined> {\n  if (isAsyncIterable(source)) {\n    return (async function * () {\n      for await (const val of source) {\n        yield func(val)\n      }\n    })()\n  }\n\n  // if mapping function returns a promise we have to return an async generator\n  const peekable = peek(source)\n  const { value, done } = peekable.next()\n\n  if (done === true) {\n    return (function * () {}())\n  }\n\n  const res = func(value)\n\n  // @ts-expect-error .then is not present on O\n  if (typeof res.then === 'function') {\n    return (async function * () {\n      yield await res\n\n      for await (const val of peekable) {\n        yield func(val)\n      }\n    })()\n  }\n\n  const fn = func as (val: I) => O\n\n  return (function * () {\n    yield res as O\n\n    for (const val of peekable) {\n      yield fn(val)\n    }\n  })()\n}\n\nexport default map\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,OAAOA,IAAI,MAAM,aAAa;AAE9B,SAASC,eAAeA,CAAMC,KAAU;EACtC,OAAOA,KAAK,CAACC,MAAM,CAACC,aAAa,CAAC,IAAI,IAAI;AAC5C;AASA,SAASC,GAAGA,CAASC,MAAsC,EAAEC,IAAgC;EAC3F,IAAIN,eAAe,CAACK,MAAM,CAAC,EAAE;IAC3B,OAAQ,mBAAgB;MACtB,WAAW,MAAME,GAAG,IAAIF,MAAM,EAAE;QAC9B,MAAMC,IAAI,CAACC,GAAG,CAAC;;IAEnB,CAAC,CAAC,CAAE;;EAGN;EACA,MAAMC,QAAQ,GAAGT,IAAI,CAACM,MAAM,CAAC;EAC7B,MAAM;IAAEI,KAAK;IAAEC;EAAI,CAAE,GAAGF,QAAQ,CAACG,IAAI,EAAE;EAEvC,IAAID,IAAI,KAAK,IAAI,EAAE;IACjB,OAAQ,aAAU,CAAK,CAAC,EAAE;;EAG5B,MAAME,GAAG,GAAGN,IAAI,CAACG,KAAK,CAAC;EAEvB;EACA,IAAI,OAAOG,GAAG,CAACC,IAAI,KAAK,UAAU,EAAE;IAClC,OAAQ,mBAAgB;MACtB,MAAM,MAAMD,GAAG;MAEf,WAAW,MAAML,GAAG,IAAIC,QAAQ,EAAE;QAChC,MAAMF,IAAI,CAACC,GAAG,CAAC;;IAEnB,CAAC,CAAC,CAAE;;EAGN,MAAMO,EAAE,GAAGR,IAAqB;EAEhC,OAAQ,aAAU;IAChB,MAAMM,GAAQ;IAEd,KAAK,MAAML,GAAG,IAAIC,QAAQ,EAAE;MAC1B,MAAMM,EAAE,CAACP,GAAG,CAAC;;EAEjB,CAAC,CAAC,CAAE;AACN;AAEA,eAAeH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}