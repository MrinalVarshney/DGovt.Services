{"ast":null,"code":"import { sink } from './sink.js';\nimport { source } from './source.js';\n/**\n * Convert a Node.js [`Duplex`](https://nodejs.org/dist/latest/docs/api/stream.html#class-streamduplex)\n * stream to a [duplex iterable](https://achingbrain.github.io/it-stream-types/interfaces/Duplex.html).\n */\nexport function duplex(duplex) {\n  return {\n    sink: sink(duplex),\n    source: source(duplex)\n  };\n}","map":{"version":3,"names":["sink","source","duplex"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/stream-to-it/src/duplex.ts"],"sourcesContent":["import { sink } from './sink.js'\nimport { source } from './source.js'\nimport type { Source, Duplex as ItDuplex } from 'it-stream-types'\nimport type { Duplex } from 'node:stream'\n\n/**\n * Convert a Node.js [`Duplex`](https://nodejs.org/dist/latest/docs/api/stream.html#class-streamduplex)\n * stream to a [duplex iterable](https://achingbrain.github.io/it-stream-types/interfaces/Duplex.html).\n */\nexport function duplex <TSource = Uint8Array, TSink = TSource> (duplex: Duplex): ItDuplex<AsyncGenerator<TSource>, Source<TSink>, Promise<void>> {\n  return {\n    sink: sink(duplex),\n    source: source(duplex)\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;AAChC,SAASC,MAAM,QAAQ,aAAa;AAIpC;;;;AAIA,OAAM,SAAUC,MAAMA,CAA0CA,MAAc;EAC5E,OAAO;IACLF,IAAI,EAAEA,IAAI,CAACE,MAAM,CAAC;IAClBD,MAAM,EAAEA,MAAM,CAACC,MAAM;GACtB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}