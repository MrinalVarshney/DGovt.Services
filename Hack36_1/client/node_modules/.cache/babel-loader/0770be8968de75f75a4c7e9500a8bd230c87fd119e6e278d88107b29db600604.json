{"ast":null,"code":"import { createGetAll } from './get-all.js';\nimport { createGet } from './get.js';\nimport { createProfiles } from './profiles/index.js';\nimport { createReplace } from './replace.js';\nimport { createSet } from './set.js';\nexport function createConfig(client) {\n  return {\n    getAll: createGetAll(client),\n    get: createGet(client),\n    set: createSet(client),\n    replace: createReplace(client),\n    profiles: createProfiles(client)\n  };\n}","map":{"version":3,"names":["createGetAll","createGet","createProfiles","createReplace","createSet","createConfig","client","getAll","get","set","replace","profiles"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/config/index.ts"],"sourcesContent":["import { createGetAll } from './get-all.js'\nimport { createGet } from './get.js'\nimport { createProfiles, type ConfigProfilesAPI } from './profiles/index.js'\nimport { createReplace } from './replace.js'\nimport { createSet } from './set.js'\nimport type { HTTPRPCOptions } from '../index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport interface Config {\n  Addresses?: AddressConfig\n  API?: APIConfig\n  Profiles?: string\n  Bootstrap?: string[]\n  Discovery?: DiscoveryConfig\n  Datastore?: DatastoreConfig\n  Identity?: IdentityConfig\n  Keychain?: KeychainConfig\n  Pubsub?: PubsubConfig\n  Swarm?: SwarmConfig\n  Routing?: RoutingConfig\n}\n\n/**\n * Contains information about various listener addresses to be used by this node\n */\nexport interface AddressConfig {\n  API?: string\n  RPC?: string\n  Delegates?: string[]\n  Gateway?: string\n  Swarm?: string[]\n  Announce?: string[]\n  NoAnnounce?: string[]\n}\n\nexport interface APIConfig {\n  HTTPHeaders?: Record<string, string[]>\n}\n\nexport interface DiscoveryConfig {\n  MDNS?: MDNSDiscovery\n  webRTCStar?: WebRTCStarDiscovery\n}\n\nexport interface MDNSDiscovery {\n  Enabled?: boolean\n  Interval?: number\n}\n\nexport interface WebRTCStarDiscovery {\n  Enabled?: boolean\n}\n\nexport interface DatastoreConfig {\n  Spec?: DatastoreSpec\n}\n\nexport interface DatastoreType {\n  type: string\n  path: string\n  sync?: boolean\n  shardFunc?: string\n  compression?: string\n}\n\nexport interface DatastoreMountPoint {\n  mountpoint: string\n  type: string\n  prefix: string\n  child: DatastoreType\n}\n\nexport interface DatastoreSpec {\n  type?: string\n  mounts?: DatastoreMountPoint[]\n}\n\nexport interface IdentityConfig {\n  /**\n   * The unique PKI identity label for this configs peer. Set on init and never\n   * read, its merely here for convenience. IPFS will always generate the peerID\n   * from its keypair at runtime.\n   */\n  PeerID: string\n\n  /**\n   * The base64 encoded protobuf describing (and containing) the nodes private key.\n   */\n  PrivKey: string\n}\n\nexport interface KeychainConfig {\n  DEK?: DEK\n}\n\nexport interface DEK {\n  keyLength?: number\n  iterationCount?: number\n  salt?: string\n  hash?: string\n}\n\nexport interface PubsubConfig {\n  PubSubRouter?: 'gossipsub' | 'floodsub'\n  Enabled?: boolean\n}\n\nexport interface SwarmConfig {\n  ConnMgr?: ConnMgrConfig\n  DisableNatPortMap?: boolean\n}\n\nexport interface ConnMgrConfig {\n  LowWater?: number\n  HighWater?: number\n}\n\nexport interface RoutingConfig {\n  Type?: string\n}\n\nexport interface ConfigAPI {\n  /**\n   * Returns a value from the currently being used config. If the daemon\n   * is off, it returns the value from the stored config.\n   */\n  get(key: string, options?: HTTPRPCOptions): Promise<string | Record<string, any>>\n\n  /**\n   * Returns the full config been used. If the daemon is off, it returns the\n   * stored config\n   */\n  getAll(options?: HTTPRPCOptions): Promise<Config>\n\n  /**\n   * Adds or replaces a config value. Note that restarting the node will be\n   * necessary for any change to take effect.\n   */\n  set(key: string, value: any, options?: HTTPRPCOptions): Promise<void>\n\n  /**\n   * Replaces the full config. Note that restarting the node will be\n   * necessary for any change to take effect.\n   */\n  replace(config: Config, options?: HTTPRPCOptions): Promise<void>\n\n  profiles: ConfigProfilesAPI\n}\n\nexport function createConfig (client: HTTPRPCClient): ConfigAPI {\n  return {\n    getAll: createGetAll(client),\n    get: createGet(client),\n    set: createSet(client),\n    replace: createReplace(client),\n    profiles: createProfiles(client)\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,cAAc;AAC3C,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,cAAc,QAAgC,qBAAqB;AAC5E,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,SAAS,QAAQ,UAAU;AAiJpC,OAAM,SAAUC,YAAYA,CAAEC,MAAqB;EACjD,OAAO;IACLC,MAAM,EAAEP,YAAY,CAACM,MAAM,CAAC;IAC5BE,GAAG,EAAEP,SAAS,CAACK,MAAM,CAAC;IACtBG,GAAG,EAAEL,SAAS,CAACE,MAAM,CAAC;IACtBI,OAAO,EAAEP,aAAa,CAACG,MAAM,CAAC;IAC9BK,QAAQ,EAAET,cAAc,CAACI,MAAM;GAChC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}