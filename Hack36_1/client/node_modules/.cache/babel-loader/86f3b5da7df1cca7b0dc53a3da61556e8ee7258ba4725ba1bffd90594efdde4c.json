{"ast":null,"code":"import { base64url } from 'multiformats/bases/base64';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/* HTTP RPC:\n * - wraps binary data in multibase. base64url is used to avoid issues\n *   when a binary data is passed as search param in URL.\n *   Historical context: https://github.com/ipfs/go-ipfs/issues/7939\n *   Multibase wrapping introduced in: https://github.com/ipfs/go-ipfs/pull/8183\n */\nexport const rpcArrayToTextArray = strings => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText);\n  }\n  return strings;\n};\nexport const rpcToText = mb => uint8ArrayToString(rpcToBytes(mb));\nexport const rpcToBytes = mb => base64url.decode(mb);\nexport const rpcToBigInt = mb => BigInt(`0x${uint8ArrayToString(base64url.decode(mb), 'base16')}`);\nexport const textToUrlSafeRpc = text => base64url.encode(uint8ArrayFromString(text));","map":{"version":3,"names":["base64url","fromString","uint8ArrayFromString","toString","uint8ArrayToString","rpcArrayToTextArray","strings","Array","isArray","map","rpcToText","mb","rpcToBytes","decode","rpcToBigInt","BigInt","textToUrlSafeRpc","text","encode"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/http-rpc-wire-format.ts"],"sourcesContent":["import { base64url } from 'multiformats/bases/base64'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/* HTTP RPC:\n * - wraps binary data in multibase. base64url is used to avoid issues\n *   when a binary data is passed as search param in URL.\n *   Historical context: https://github.com/ipfs/go-ipfs/issues/7939\n *   Multibase wrapping introduced in: https://github.com/ipfs/go-ipfs/pull/8183\n */\n\nexport const rpcArrayToTextArray = (strings: string[]): string[] => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText)\n  }\n  return strings\n}\n\nexport const rpcToText = (mb: string): string => uint8ArrayToString(rpcToBytes(mb))\n\nexport const rpcToBytes = (mb: string): Uint8Array => base64url.decode(mb)\n\nexport const rpcToBigInt = (mb: string): bigint => BigInt(`0x${uint8ArrayToString(base64url.decode(mb), 'base16')}`)\n\nexport const textToUrlSafeRpc = (text: string): string => base64url.encode(uint8ArrayFromString(text))\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,2BAA2B;AACrD,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AAEtE;;;;;;AAOA,OAAO,MAAMC,mBAAmB,GAAIC,OAAiB,IAAc;EACjE,IAAIC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,EAAE;IAC1B,OAAOA,OAAO,CAACG,GAAG,CAACC,SAAS,CAAC;EAC/B;EACA,OAAOJ,OAAO;AAChB,CAAC;AAED,OAAO,MAAMI,SAAS,GAAIC,EAAU,IAAaP,kBAAkB,CAACQ,UAAU,CAACD,EAAE,CAAC,CAAC;AAEnF,OAAO,MAAMC,UAAU,GAAID,EAAU,IAAiBX,SAAS,CAACa,MAAM,CAACF,EAAE,CAAC;AAE1E,OAAO,MAAMG,WAAW,GAAIH,EAAU,IAAaI,MAAM,CAAC,KAAKX,kBAAkB,CAACJ,SAAS,CAACa,MAAM,CAACF,EAAE,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC;AAEpH,OAAO,MAAMK,gBAAgB,GAAIC,IAAY,IAAajB,SAAS,CAACkB,MAAM,CAAChB,oBAAoB,CAACe,IAAI,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}