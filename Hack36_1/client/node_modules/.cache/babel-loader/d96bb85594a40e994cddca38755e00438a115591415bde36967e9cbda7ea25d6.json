{"ast":null,"code":"import { createGen } from './gen.js';\nimport { createImport } from './import.js';\nimport { createList } from './list.js';\nimport { createRename } from './rename.js';\nimport { createRm } from './rm.js';\nexport function createKey(client) {\n  return {\n    gen: createGen(client),\n    import: createImport(client),\n    list: createList(client),\n    rename: createRename(client),\n    rm: createRm(client)\n  };\n}","map":{"version":3,"names":["createGen","createImport","createList","createRename","createRm","createKey","client","gen","import","list","rename","rm"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/key/index.ts"],"sourcesContent":["import { createGen } from './gen.js'\nimport { createImport } from './import.js'\nimport { createList } from './list.js'\nimport { createRename } from './rename.js'\nimport { createRm } from './rm.js'\nimport type { HTTPRPCOptions } from '../index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport type KeyType = 'ed25519' | 'rsa'\n\nexport interface KeyGenOptions extends HTTPRPCOptions {\n  type?: KeyType\n  size?: number\n  'ipns-base'?: string\n}\n\nexport interface Key {\n  id: string\n  name: string\n}\n\nexport interface KeyRenameResult {\n  id: string\n  was: string\n  now: string\n  overwrite: boolean\n}\n\nexport interface KeyAPI {\n  /**\n   * Generate a new key\n   *\n   * @example\n   * ```js\n   * const key = await ipfs.key.gen('my-key', {\n   *   type: 'rsa',\n   *   size: 2048\n   * })\n   *\n   * console.log(key)\n   * // { id: 'QmYWqAFvLWb2G5A69JGXui2JJXzaHXiUEmQkQgor6kNNcJ',\n   * //  name: 'my-key' }\n   * ```\n   */\n  gen(name: string, options?: KeyGenOptions): Promise<Key>\n\n  /**\n   * List all the keys\n   *\n   * @example\n   * ```js\n   * const keys = await ipfs.key.list()\n   *\n   * console.log(keys)\n   * // [\n   * //   { id: 'QmTe4tuceM2sAmuZiFsJ9tmAopA8au71NabBDdpPYDjxAb',\n   * //     name: 'self' },\n   * //   { id: 'QmWETF5QvzGnP7jKq5sPDiRjSM2fzwzNsna4wSBEzRzK6W',\n   * //     name: 'my-key' }\n   * // ]\n   * ```\n   */\n  list(options?: HTTPRPCOptions): Promise<Key[]>\n\n  /**\n   * Remove a key\n   *\n   * @example\n   * ```js\n   * const key = await ipfs.key.rm('my-key')\n   *\n   * console.log(key)\n   * // { id: 'QmWETF5QvzGnP7jKq5sPDiRjSM2fzwzNsna4wSBEzRzK6W',\n   * //   name: 'my-key' }\n   * ```\n   */\n  rm(name: string, options?: HTTPRPCOptions): Promise<Key>\n\n  /**\n   * Rename a key\n   *\n   * @example\n   * ```js\n   * const key = await ipfs.key.rename('my-key', 'my-new-key')\n   *\n   * console.log(key)\n   * // { id: 'Qmd4xC46Um6s24MradViGLFtMitvrR4SVexKUgPgFjMNzg',\n   * //   was: 'my-key',\n   * //   now: 'my-new-key',\n   * //   overwrite: false }\n   * ```\n   */\n  rename(oldName: string, newName: string, options?: HTTPRPCOptions): Promise<KeyRenameResult>\n\n  /**\n   * Remove a key\n   *\n   * @example\n   * ```js\n   * const key = await ipfs.key.import('clone', pem, 'password')\n   *\n   * console.log(key)\n   * // { id: 'QmQRiays958UM7norGRQUG3tmrLq8pJdmJarwYSk2eLthQ',\n   * //   name: 'clone' }\n   * ```\n   */\n  import(name: string, pem: string, password: string, options?: HTTPRPCOptions): Promise<Key>\n}\n\nexport function createKey (client: HTTPRPCClient): KeyAPI {\n  return {\n    gen: createGen(client),\n    import: createImport(client),\n    list: createList(client),\n    rename: createRename(client),\n    rm: createRm(client)\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,UAAU;AACpC,SAASC,YAAY,QAAQ,aAAa;AAC1C,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,YAAY,QAAQ,aAAa;AAC1C,SAASC,QAAQ,QAAQ,SAAS;AAyGlC,OAAM,SAAUC,SAASA,CAAEC,MAAqB;EAC9C,OAAO;IACLC,GAAG,EAAEP,SAAS,CAACM,MAAM,CAAC;IACtBE,MAAM,EAAEP,YAAY,CAACK,MAAM,CAAC;IAC5BG,IAAI,EAAEP,UAAU,CAACI,MAAM,CAAC;IACxBI,MAAM,EAAEP,YAAY,CAACG,MAAM,CAAC;IAC5BK,EAAE,EAAEP,QAAQ,CAACE,MAAM;GACpB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}