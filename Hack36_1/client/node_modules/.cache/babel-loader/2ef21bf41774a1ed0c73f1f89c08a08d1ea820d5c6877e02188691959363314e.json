{"ast":null,"code":"import { createAdd } from './add.js';\nimport { createLs } from './ls.js';\nimport { createRm } from './rm.js';\nexport function createService(client) {\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client)\n  };\n}","map":{"version":3,"names":["createAdd","createLs","createRm","createService","client","add","ls","rm"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/pin/remote/service/index.ts"],"sourcesContent":["import { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport type { HTTPRPCOptions } from '../../../index.js'\nimport type { HTTPRPCClient } from '../../../lib/core.js'\n\nexport interface PinRemoteServiceAPI {\n  /**\n   * Registers remote pinning service with a given name. Errors if service\n   * with the given name is already registered.\n   */\n  add(name: string, credentials: Credentials): Promise<void>\n\n  /**\n   * Unregisters remote pinning service with a given name. If service with such\n   * name isn't registered this is a noop.\n   */\n  rm(name: string, options?: HTTPRPCOptions): Promise<void>\n\n  /**\n   * List registered remote pinning services.\n   */\n  ls: ((options: { stat: true } & HTTPRPCOptions) => Promise<RemotePinServiceWithStat[]>) & ((options?: HTTPRPCOptions) => Promise<RemotePinService[]>)\n}\n\nexport interface Credentials extends HTTPRPCOptions {\n  /**\n   * Service endpoint\n   */\n  endpoint: URL\n  /**\n   * Service key\n   */\n  key: string\n}\n\nexport interface RemotePinService {\n  /**\n   * Service name\n   */\n  service: string\n  /**\n   * Service endpoint URL\n   */\n  endpoint: URL\n}\n\nexport interface RemotePinServiceWithStat extends RemotePinService {\n  /**\n   * Pin count on the remote service. It is fetched from the remote service and\n   * is done only if `pinCount` option is used. Furthermore it may not be\n   * present if service was unreachable.\n   */\n  stat?: Stat\n}\n\nexport type Stat = ValidStat | InvalidStat\n\ninterface ValidStat {\n  status: 'valid'\n  pinCount: PinCount\n}\n\ninterface InvalidStat {\n  status: 'invalid'\n  pinCount?: undefined\n}\n\nexport interface PinCount {\n  queued: number\n  pinning: number\n  pinned: number\n  failed: number\n}\n\nexport function createService (client: HTTPRPCClient): PinRemoteServiceAPI {\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client)\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,UAAU;AACpC,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,QAAQ,QAAQ,SAAS;AAyElC,OAAM,SAAUC,aAAaA,CAAEC,MAAqB;EAClD,OAAO;IACLC,GAAG,EAAEL,SAAS,CAACI,MAAM,CAAC;IACtBE,EAAE,EAAEL,QAAQ,CAACG,MAAM,CAAC;IACpBG,EAAE,EAAEL,QAAQ,CAACE,MAAM;GACpB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}