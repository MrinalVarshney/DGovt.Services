{"ast":null,"code":"import { createAdd } from './add.js';\nimport { createLs } from './ls.js';\nimport { createRmAll } from './rm-all.js';\nimport { createRm } from './rm.js';\nimport { createService } from './service/index.js';\nexport function createRemote(client) {\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client),\n    rmAll: createRmAll(client),\n    service: createService(client)\n  };\n}","map":{"version":3,"names":["createAdd","createLs","createRmAll","createRm","createService","createRemote","client","add","ls","rm","rmAll","service"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/pin/remote/index.ts"],"sourcesContent":["import { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRmAll } from './rm-all.js'\nimport { createRm } from './rm.js'\nimport { createService } from './service/index.js'\nimport type { PinRemoteServiceAPI } from './service/index.js'\nimport type { HTTPRPCOptions } from '../../index.js'\nimport type { HTTPRPCClient } from '../../lib/core.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { CID } from 'multiformats/cid'\n\nexport interface PinRemoteAPI {\n  /**\n   * API for configuring remote pinning services.\n   */\n  service: PinRemoteServiceAPI\n\n  /**\n   * Pin a content with a given CID to a remote pinning service.\n   */\n  add(cid: CID, options: PinRemoteAddOptions): Promise<RemotePin>\n\n  /**\n   * Returns a list of matching pins on the remote pinning service.\n   */\n  ls(query: RemotePinQuery): AsyncIterable<RemotePin>\n\n  /**\n   * Removes a single pin object matching query allowing it to be garbage\n   * collected (if needed). Will error if multiple pins match provided\n   * query. To remove all matches use `rmAll` instead.\n   */\n  rm(query: RemotePinQuery): Promise<void>\n\n  /**\n   * Removes all pin object that match given query allowing them to be garbage\n   * collected if needed.\n   */\n  rmAll(query: RemotePinQuery): Promise<void>\n}\n\nexport interface PinRemoteAddOptions extends RemoteServiceOptions {\n  /**\n   * Optional name for pinned data; can be used for lookups later (max 255\n   * characters)\n   */\n  name?: string\n\n  /**\n   * Optional list of multiaddrs known to provide the data (max 20).\n   */\n  origins?: Multiaddr[]\n\n  /**\n   * If true, will add to the queue on the remote service and return\n   * immediately. If false or omitted will wait until pinned on the\n   * remote service.\n   */\n  background?: boolean\n}\n\n/**\n * Reperesents query for matching pin objects.\n */\nexport interface RemotePinQuery extends RemoteServiceOptions {\n  /**\n   * If provided, will only include pin objects that have a CID from the given\n   * set.\n   */\n  cid?: CID[]\n  /**\n   * If passed, will only include pin objects with names that have this name\n   * (case-sensitive, exact match).\n   */\n  name?: string\n\n  /**\n   * Return pin objects for pins that have one of the specified status values.\n   * If omitted treated as [\"pinned\"]\n   */\n  status?: RemotePinStatus[]\n\n  all?: boolean\n}\n\nexport interface RemoteServiceOptions extends HTTPRPCOptions {\n  /**\n   * Name of the remote pinning service to use.\n   */\n  service?: string\n}\n\nexport interface RemotePin {\n  status: RemotePinStatus\n  cid: CID\n  name: string\n}\n\nexport type RemotePinStatus =\n  | 'queued'\n  | 'pinning'\n  | 'pinned'\n  | 'failed'\n\nexport function createRemote (client: HTTPRPCClient): PinRemoteAPI {\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client),\n    rmAll: createRmAll(client),\n    service: createService(client)\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,UAAU;AACpC,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,aAAa,QAAQ,oBAAoB;AAoGlD,OAAM,SAAUC,YAAYA,CAAEC,MAAqB;EACjD,OAAO;IACLC,GAAG,EAAEP,SAAS,CAACM,MAAM,CAAC;IACtBE,EAAE,EAAEP,QAAQ,CAACK,MAAM,CAAC;IACpBG,EAAE,EAAEN,QAAQ,CAACG,MAAM,CAAC;IACpBI,KAAK,EAAER,WAAW,CAACI,MAAM,CAAC;IAC1BK,OAAO,EAAEP,aAAa,CAACE,MAAM;GAC9B;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}