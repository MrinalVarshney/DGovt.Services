{"ast":null,"code":"import { anySignal } from 'any-signal';\nimport { CID } from 'multiformats/cid';\nimport { multipartRequest } from '../lib/multipart-request.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport function createPut(client) {\n  return async function put(data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    let res;\n    try {\n      const response = await client.post('block/put', {\n        signal,\n        searchParams: toUrlSearchParams(options),\n        ...(await multipartRequest([data], controller, options.headers))\n      });\n      res = await response.json();\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return await put(data, {\n          ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return await put(data, {\n          ...options,\n          format: 'cbor'\n        });\n      }\n      throw err;\n    } finally {\n      signal.clear();\n    }\n    return CID.parse(res.Key);\n  };\n}","map":{"version":3,"names":["anySignal","CID","multipartRequest","toUrlSearchParams","createPut","client","put","data","options","controller","AbortController","signal","res","response","post","searchParams","headers","json","err","format","clear","parse","Key"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/block/put.ts"],"sourcesContent":["import { anySignal } from 'any-signal'\nimport { CID } from 'multiformats/cid'\nimport { multipartRequest } from '../lib/multipart-request.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport type { BlockAPI } from './index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport function createPut (client: HTTPRPCClient): BlockAPI['put'] {\n  return async function put (data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    let res\n    try {\n      const response = await client.post('block/put', {\n        signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest([data], controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (err: any) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return await put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return await put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    } finally {\n      signal.clear()\n    }\n\n    return CID.parse(res.Key)\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,iBAAiB,QAAQ,gCAAgC;AAIlE,OAAM,SAAUC,SAASA,CAAEC,MAAqB;EAC9C,OAAO,eAAeC,GAAGA,CAAEC,IAAI,EAAEC,OAAO,GAAG,EAAE;IAC3C;IACA,MAAMC,UAAU,GAAG,IAAIC,eAAe,EAAE;IACxC,MAAMC,MAAM,GAAGX,SAAS,CAAC,CAACS,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC,CAAC;IAE7D,IAAIC,GAAG;IACP,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,MAAM,CAACS,IAAI,CAAC,WAAW,EAAE;QAC9CH,MAAM;QACNI,YAAY,EAAEZ,iBAAiB,CAACK,OAAO,CAAC;QACxC,IACE,MAAMN,gBAAgB,CAAC,CAACK,IAAI,CAAC,EAAEE,UAAU,EAAED,OAAO,CAACQ,OAAO,CAAC;OAE9D,CAAC;MACFJ,GAAG,GAAG,MAAMC,QAAQ,CAACI,IAAI,EAAE;IAC7B,CAAC,CAAC,OAAOC,GAAQ,EAAE;MACjB;MACA;MACA,IAAIV,OAAO,CAACW,MAAM,KAAK,QAAQ,EAAE;QAC/B,OAAO,MAAMb,GAAG,CAACC,IAAI,EAAE;UAAE,GAAGC,OAAO;UAAEW,MAAM,EAAE;QAAU,CAAE,CAAC;MAC5D,CAAC,MAAM,IAAIX,OAAO,CAACW,MAAM,KAAK,UAAU,EAAE;QACxC,OAAO,MAAMb,GAAG,CAACC,IAAI,EAAE;UAAE,GAAGC,OAAO;UAAEW,MAAM,EAAE;QAAM,CAAE,CAAC;MACxD;MAEA,MAAMD,GAAG;IACX,CAAC,SAAS;MACRP,MAAM,CAACS,KAAK,EAAE;IAChB;IAEA,OAAOnB,GAAG,CAACoB,KAAK,CAACT,GAAG,CAACU,GAAG,CAAC;EAC3B,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}