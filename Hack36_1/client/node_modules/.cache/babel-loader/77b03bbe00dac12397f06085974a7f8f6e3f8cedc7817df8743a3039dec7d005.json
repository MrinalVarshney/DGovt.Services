{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamel } from '../lib/object-to-camel.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { createLocal } from './local.js';\nexport function createRefs(client) {\n  async function* refs(args, options = {}) {\n    const argsArr = Array.isArray(args) ? args : [args];\n    const res = await client.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    });\n    yield* res.ndjson();\n  }\n  return Object.assign(refs, {\n    local: createLocal(client)\n  });\n}","map":{"version":3,"names":["CID","objectToCamel","toUrlSearchParams","createLocal","createRefs","client","refs","args","options","argsArr","Array","isArray","res","post","signal","searchParams","arg","map","Uint8Array","decode","headers","transform","ndjson","Object","assign","local"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/refs/index.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamel } from '../lib/object-to-camel.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { createLocal } from './local.js'\nimport type { HTTPRPCOptions, IPFSPath } from '../index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport interface RefsAPI {\n  /**\n   * Get links (references) from an object\n   */\n  (ipfsPath: IPFSPath | IPFSPath[], options?: RefsOptions): AsyncIterable<RefsResult>\n\n  /**\n   * List blocks stored in the local block store\n   */\n  local(options?: HTTPRPCOptions): AsyncIterable<RefsResult>\n}\n\nexport interface RefsOptions extends HTTPRPCOptions {\n  recursive?: boolean\n  unique?: boolean\n  format?: string\n  edges?: boolean\n  maxDepth?: number\n}\n\nexport interface RefsResult {\n  ref: string\n  err?: Error\n}\n\nexport function createRefs (client: HTTPRPCClient): RefsAPI {\n  async function * refs (args: IPFSPath | IPFSPath[], options: RefsOptions = {}): AsyncIterable<RefsResult> {\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await client.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: createLocal(client)\n  })\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,YAAY;AA6BxC,OAAM,SAAUC,UAAUA,CAAEC,MAAqB;EAC/C,gBAAiBC,IAAIA,CAAEC,IAA2B,EAAEC,OAAA,GAAuB,EAAE;IAC3E,MAAMC,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;IAEnD,MAAMK,GAAG,GAAG,MAAMP,MAAM,CAACQ,IAAI,CAAC,MAAM,EAAE;MACpCC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEb,iBAAiB,CAAC;QAC9Bc,GAAG,EAAEP,OAAO,CAACQ,GAAG,CAACD,GAAG,IAAI,GAAGA,GAAG,YAAYE,UAAU,GAAGlB,GAAG,CAACmB,MAAM,CAACH,GAAG,CAAC,GAAGA,GAAG,EAAE,CAAC;QAC/E,GAAGR;OACJ,CAAC;MACFY,OAAO,EAAEZ,OAAO,CAACY,OAAO;MACxBC,SAAS,EAAEpB;KACZ,CAAC;IAEF,OAAQW,GAAG,CAACU,MAAM,EAAE;EACtB;EAEA,OAAOC,MAAM,CAACC,MAAM,CAAClB,IAAI,EAAE;IACzBmB,KAAK,EAAEtB,WAAW,CAACE,MAAM;GAC1B,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}