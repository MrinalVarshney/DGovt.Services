{"ast":null,"code":"const LOAD_HASHER = async codeOrName => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`));\nexport class Multihashes {\n  _hashersByName;\n  _hashersByCode;\n  _loadHasher;\n  constructor(options) {\n    // Object with current list of active hashers\n    this._hashersByName = {};\n    // Object with current list of active hashers\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher ?? LOAD_HASHER;\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher);\n    }\n  }\n  /**\n   * Add support for a multibase hasher\n   */\n  addHasher(hasher) {\n    if (this._hashersByName[hasher.name] != null || this._hashersByCode[hasher.code] != null) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`);\n    }\n    this._hashersByName[hasher.name] = hasher;\n    this._hashersByCode[hasher.code] = hasher;\n  }\n  /**\n   * Remove support for a multibase hasher\n   */\n  removeHasher(hasher) {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete this._hashersByName[hasher.name];\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete this._hashersByCode[hasher.code];\n  }\n  /**\n   * @param {number | string} code\n   */\n  async getHasher(code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\n    // @ts-expect-error cannot derive code type\n    if (table[code] != null) {\n      // @ts-expect-error cannot derive code type\n      return table[code];\n    }\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code);\n    // @ts-expect-error cannot derive code type\n    if (table[code] == null) {\n      this.addHasher(hasher);\n    }\n    return hasher;\n  }\n  listHashers() {\n    return Object.values(this._hashersByName);\n  }\n}","map":{"version":3,"names":["LOAD_HASHER","codeOrName","Promise","reject","Error","Multihashes","_hashersByName","_hashersByCode","_loadHasher","constructor","options","loadHasher","hasher","hashers","addHasher","name","code","removeHasher","getHasher","table","listHashers","Object","values"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/multihashes.ts"],"sourcesContent":["import type { MultihashHasher } from 'multiformats/hashes/interface'\n\nexport interface LoadHasherFn { (codeOrName: number | string): Promise<MultihashHasher> }\n\nconst LOAD_HASHER: LoadHasherFn = async (codeOrName) => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`))\n\nexport interface MultihashesInit {\n  loadHasher?: LoadHasherFn\n  hashers: MultihashHasher[]\n}\n\nexport class Multihashes {\n  private readonly _hashersByName: Record<string, MultihashHasher>\n  private readonly _hashersByCode: Record<number, MultihashHasher>\n  private readonly _loadHasher: LoadHasherFn\n\n  constructor (options: MultihashesInit) {\n    // Object with current list of active hashers\n    this._hashersByName = {}\n\n    // Object with current list of active hashers\n    this._hashersByCode = {}\n\n    this._loadHasher = options.loadHasher ?? LOAD_HASHER\n\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher)\n    }\n  }\n\n  /**\n   * Add support for a multibase hasher\n   */\n  addHasher (hasher: MultihashHasher): void {\n    if (this._hashersByName[hasher.name] != null || this._hashersByCode[hasher.code] != null) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`)\n    }\n\n    this._hashersByName[hasher.name] = hasher\n    this._hashersByCode[hasher.code] = hasher\n  }\n\n  /**\n   * Remove support for a multibase hasher\n   */\n  removeHasher (hasher: MultihashHasher): void {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete this._hashersByName[hasher.name]\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete this._hashersByCode[hasher.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getHasher (code: number | string): Promise<MultihashHasher> {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode\n\n    // @ts-expect-error cannot derive code type\n    if (table[code] != null) {\n      // @ts-expect-error cannot derive code type\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code)\n\n    // @ts-expect-error cannot derive code type\n    if (table[code] == null) {\n      this.addHasher(hasher)\n    }\n\n    return hasher\n  }\n\n  listHashers (): MultihashHasher[] {\n    return Object.values(this._hashersByName)\n  }\n}\n"],"mappings":"AAIA,MAAMA,WAAW,GAAiB,MAAOC,UAAU,IAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,wBAAwBH,UAAU,GAAG,CAAC,CAAC;AAOxH,OAAM,MAAOI,WAAW;EACLC,cAAc;EACdC,cAAc;EACdC,WAAW;EAE5BC,YAAaC,OAAwB;IACnC;IACA,IAAI,CAACJ,cAAc,GAAG,EAAE;IAExB;IACA,IAAI,CAACC,cAAc,GAAG,EAAE;IAExB,IAAI,CAACC,WAAW,GAAGE,OAAO,CAACC,UAAU,IAAIX,WAAW;IAEpD;IACA,KAAK,MAAMY,MAAM,IAAIF,OAAO,CAACG,OAAO,EAAE;MACpC,IAAI,CAACC,SAAS,CAACF,MAAM,CAAC;IACxB;EACF;EAEA;;;EAGAE,SAASA,CAAEF,MAAuB;IAChC,IAAI,IAAI,CAACN,cAAc,CAACM,MAAM,CAACG,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,CAACR,cAAc,CAACK,MAAM,CAACI,IAAI,CAAC,IAAI,IAAI,EAAE;MACxF,MAAM,IAAIZ,KAAK,CAAC,sCAAsCQ,MAAM,CAACG,IAAI,GAAG,CAAC;IACvE;IAEA,IAAI,CAACT,cAAc,CAACM,MAAM,CAACG,IAAI,CAAC,GAAGH,MAAM;IACzC,IAAI,CAACL,cAAc,CAACK,MAAM,CAACI,IAAI,CAAC,GAAGJ,MAAM;EAC3C;EAEA;;;EAGAK,YAAYA,CAAEL,MAAuB;IACnC;IACA,OAAO,IAAI,CAACN,cAAc,CAACM,MAAM,CAACG,IAAI,CAAC;IACvC;IACA,OAAO,IAAI,CAACR,cAAc,CAACK,MAAM,CAACI,IAAI,CAAC;EACzC;EAEA;;;EAGA,MAAME,SAASA,CAAEF,IAAqB;IACpC,MAAMG,KAAK,GAAG,OAAOH,IAAI,KAAK,QAAQ,GAAG,IAAI,CAACV,cAAc,GAAG,IAAI,CAACC,cAAc;IAElF;IACA,IAAIY,KAAK,CAACH,IAAI,CAAC,IAAI,IAAI,EAAE;MACvB;MACA,OAAOG,KAAK,CAACH,IAAI,CAAC;IACpB;IAEA;IACA,MAAMJ,MAAM,GAAG,MAAM,IAAI,CAACJ,WAAW,CAACQ,IAAI,CAAC;IAE3C;IACA,IAAIG,KAAK,CAACH,IAAI,CAAC,IAAI,IAAI,EAAE;MACvB,IAAI,CAACF,SAAS,CAACF,MAAM,CAAC;IACxB;IAEA,OAAOA,MAAM;EACf;EAEAQ,WAAWA,CAAA;IACT,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAChB,cAAc,CAAC;EAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}