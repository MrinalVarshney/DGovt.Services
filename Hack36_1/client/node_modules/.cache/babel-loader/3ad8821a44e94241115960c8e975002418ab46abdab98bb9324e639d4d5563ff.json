{"ast":null,"code":"/* eslint-env browser */\nimport { logger } from '@libp2p/logger';\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport mergeOpts from 'merge-options';\nimport parseDuration from 'parse-duration';\nimport { isBrowser, isWebWorker, isNode } from 'wherearewe';\nimport getAgent from './agent.js';\nimport { HTTP } from './http.js';\nimport { toUrlString } from './to-url-string.js';\nconst log = logger('js-kubo-rpc-client:lib:error-handler');\nconst merge = mergeOpts.bind({\n  ignoreUndefined: true\n});\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http';\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost';\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001';\nconst normalizeOptions = (options = {}) => {\n  let url;\n  let opts = {};\n  let agent;\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options));\n  } else if (options instanceof URL) {\n    url = options;\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url));\n    opts = options;\n  } else if (options.url instanceof URL) {\n    url = options.url;\n    opts = options;\n  } else {\n    opts = options ?? {};\n    const protocol = (opts.protocol ?? DEFAULT_PROTOCOL).replace(':', '');\n    const host = (opts.host ?? DEFAULT_HOST).split(':')[0];\n    const port = opts.port ?? DEFAULT_PORT;\n    url = new URL(`${protocol}://${host}:${port}`);\n  }\n  if (opts.apiPath != null) {\n    url.pathname = opts.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n  if (isNode) {\n    const Agent = getAgent(url);\n    agent = opts.agent ?? new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    });\n  }\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  };\n};\nexport const errorHandler = async response => {\n  let msg;\n  try {\n    if ((response.headers.get('Content-Type') ?? '').startsWith('application/json')) {\n      const data = await response.json();\n      log(data);\n      msg = data.Message ?? data.message;\n    } else {\n      msg = await response.text();\n    }\n  } catch (err) {\n    log('Failed to parse error response', err);\n    // Failed to extract/parse error message from response\n    msg = err.message;\n  }\n  let error = new HTTP.HTTPError(response);\n  if (msg != null) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError();\n    }\n    // This is what go-ipfs returns where there's a timeout\n    if (msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError();\n    }\n    // This also gets returned\n    if (msg.includes('request timed out')) {\n      error = new HTTP.TimeoutError();\n    }\n    // If we managed to extract a message from the response, use it\n    error.message = msg;\n  }\n  throw error;\n};\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\nconst kebabCase = str => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\nconst parseTimeout = value => {\n  return typeof value === 'string' ? parseDuration(value) ?? 0 : value;\n};\nexport class Client extends HTTP {\n  constructor(options = {}) {\n    const opts = normalizeOptions(options);\n    super({\n      timeout: opts.timeout != null ? parseTimeout(opts.timeout) : undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: search => {\n        const out = new URLSearchParams();\n        for (const [key, value] of search) {\n          if (value !== 'undefined' && value !== 'null' && key !== 'signal' && key !== 'timeout') {\n            out.append(kebabCase(key), value);\n          }\n          if (key === 'timeout' && !isNaN(parseInt(value))) {\n            out.append(kebabCase(key), value);\n          }\n        }\n        return out;\n      },\n      agent: opts.agent\n    });\n    // @ts-expect-error - cannot delete non-optional fields\n    delete this.get;\n    // @ts-expect-error - cannot delete non-optional fields\n    delete this.put;\n    // @ts-expect-error - cannot delete non-optional fields\n    delete this.delete;\n    // @ts-expect-error - cannot delete non-optional fields\n    delete this.options;\n    const fetch = this.fetch;\n    this.fetch = async (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`;\n      }\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }));\n    };\n  }\n}\nexport const HTTPError = HTTP.HTTPError;","map":{"version":3,"names":["logger","isMultiaddr","mergeOpts","parseDuration","isBrowser","isWebWorker","isNode","getAgent","HTTP","toUrlString","log","merge","bind","ignoreUndefined","DEFAULT_PROTOCOL","location","protocol","DEFAULT_HOST","hostname","DEFAULT_PORT","port","normalizeOptions","options","url","opts","agent","URL","replace","host","split","apiPath","pathname","undefined","Agent","keepAlive","maxSockets","Number","errorHandler","response","msg","headers","get","startsWith","data","json","Message","message","text","err","error","HTTPError","includes","TimeoutError","KEBAB_REGEX","kebabCase","str","match","toLowerCase","parseTimeout","value","Client","constructor","timeout","base","handleError","transformSearchParams","search","out","URLSearchParams","key","append","isNaN","parseInt","put","delete","fetch","resource","call","method"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/core.ts"],"sourcesContent":["/* eslint-env browser */\n\nimport { logger } from '@libp2p/logger'\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport mergeOpts from 'merge-options'\nimport parseDuration from 'parse-duration'\nimport { isBrowser, isWebWorker, isNode } from 'wherearewe'\nimport getAgent from './agent.js'\nimport { HTTP, type ExtendedResponse, type HTTPOptions } from './http.js'\nimport { toUrlString } from './to-url-string.js'\nimport type { Options } from '../index.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst log = logger('js-kubo-rpc-client:lib:error-handler')\nconst merge = mergeOpts.bind({ ignoreUndefined: true })\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\nconst normalizeOptions = (options: Options | URL | Multiaddr | string = {}): Options => {\n  let url\n  let opts: Options = {}\n  let agent\n\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options ?? {}\n\n    const protocol = (opts.protocol ?? DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host ?? DEFAULT_HOST).split(':')[0]\n    const port = (opts.port ?? DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath != null) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  if (isNode) {\n    const Agent = getAgent(url)\n\n    agent = opts.agent ?? new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    })\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  }\n}\n\nexport const errorHandler = async (response: Response): Promise<void> => {\n  let msg: string | undefined\n\n  try {\n    if ((response.headers.get('Content-Type') ?? '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message ?? data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (err: any) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  let error: Error = new HTTP.HTTPError(response)\n\n  if (msg != null) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // This is what go-ipfs returns where there's a timeout\n    if (msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // This also gets returned\n    if (msg.includes('request timed out')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // If we managed to extract a message from the response, use it\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\n\nconst kebabCase = (str: string): string => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\nconst parseTimeout = (value: string | number): number => {\n  return typeof value === 'string' ? parseDuration(value) ?? 0 : value\n}\n\nexport interface HTTPRPCClient extends Exclude<HTTP, 'put' | 'get' | 'delete' | 'options'> {\n\n}\n\nexport class Client extends HTTP implements HTTPRPCClient {\n  constructor (options: Options | URL | Multiaddr | string = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: opts.timeout != null ? parseTimeout(opts.timeout) : undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search: URLSearchParams) => {\n        const out = new URLSearchParams()\n\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal' &&\n            key !== 'timeout'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          if (key === 'timeout' && !isNaN(parseInt(value))) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      },\n      agent: opts.agent\n    })\n\n    // @ts-expect-error - cannot delete non-optional fields\n    delete this.get\n    // @ts-expect-error - cannot delete non-optional fields\n    delete this.put\n    // @ts-expect-error - cannot delete non-optional fields\n    delete this.delete\n    // @ts-expect-error - cannot delete non-optional fields\n    delete this.options\n\n    const fetch = this.fetch\n\n    this.fetch = async (resource: string | Request, options: HTTPOptions = {}): Promise<ExtendedResponse> => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nexport const HTTPError = HTTP.HTTPError\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}