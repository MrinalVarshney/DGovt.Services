{"ast":null,"code":"import { createQuery } from './query.js';\nexport var RoutingEventTypes;\n(function (RoutingEventTypes) {\n  RoutingEventTypes[RoutingEventTypes[\"SENDING_QUERY\"] = 0] = \"SENDING_QUERY\";\n  RoutingEventTypes[RoutingEventTypes[\"PEER_RESPONSE\"] = 1] = \"PEER_RESPONSE\";\n  RoutingEventTypes[RoutingEventTypes[\"FINAL_PEER\"] = 2] = \"FINAL_PEER\";\n  RoutingEventTypes[RoutingEventTypes[\"QUERY_ERROR\"] = 3] = \"QUERY_ERROR\";\n  RoutingEventTypes[RoutingEventTypes[\"PROVIDER\"] = 4] = \"PROVIDER\";\n  RoutingEventTypes[RoutingEventTypes[\"VALUE\"] = 5] = \"VALUE\";\n  RoutingEventTypes[RoutingEventTypes[\"ADDING_PEER\"] = 6] = \"ADDING_PEER\";\n  RoutingEventTypes[RoutingEventTypes[\"DIALING_PEER\"] = 7] = \"DIALING_PEER\";\n})(RoutingEventTypes || (RoutingEventTypes = {}));\n/**\n * The types of messages set/received during DHT queries\n */\nexport var RoutingMessageType;\n(function (RoutingMessageType) {\n  RoutingMessageType[RoutingMessageType[\"PUT_VALUE\"] = 0] = \"PUT_VALUE\";\n  RoutingMessageType[RoutingMessageType[\"GET_VALUE\"] = 1] = \"GET_VALUE\";\n  RoutingMessageType[RoutingMessageType[\"ADD_PROVIDER\"] = 2] = \"ADD_PROVIDER\";\n  RoutingMessageType[RoutingMessageType[\"GET_PROVIDERS\"] = 3] = \"GET_PROVIDERS\";\n  RoutingMessageType[RoutingMessageType[\"FIND_NODE\"] = 4] = \"FIND_NODE\";\n  RoutingMessageType[RoutingMessageType[\"PING\"] = 5] = \"PING\";\n})(RoutingMessageType || (RoutingMessageType = {}));\nexport function createDHT(client) {\n  return {\n    query: createQuery(client)\n  };\n}","map":{"version":3,"names":["createQuery","RoutingEventTypes","RoutingMessageType","createDHT","client","query"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/dht/index.ts"],"sourcesContent":["import { createQuery } from './query.js'\nimport type { HTTPRPCOptions } from '../index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\nimport type { PeerId, PeerInfo } from '@libp2p/interface'\nimport type { CID } from 'multiformats/cid'\n\nexport enum RoutingEventTypes {\n  SENDING_QUERY = 0,\n  PEER_RESPONSE,\n  FINAL_PEER,\n  QUERY_ERROR,\n  PROVIDER,\n  VALUE,\n  ADDING_PEER,\n  DIALING_PEER\n}\n\n/**\n * The types of messages set/received during DHT queries\n */\nexport enum RoutingMessageType {\n  PUT_VALUE = 0,\n  GET_VALUE,\n  ADD_PROVIDER,\n  GET_PROVIDERS,\n  FIND_NODE,\n  PING\n}\n\nexport type RoutingMessageName = keyof typeof RoutingMessageType\n\nexport interface RoutingRecord {\n  key: Uint8Array\n  value: Uint8Array\n  timeReceived?: Date\n}\n\nexport interface RoutingSendingQueryEvent {\n  type: RoutingEventTypes.SENDING_QUERY\n  name: 'SENDING_QUERY'\n}\n\nexport interface RoutingPeerResponseEvent {\n  from: PeerId\n  type: RoutingEventTypes.PEER_RESPONSE\n  name: 'PEER_RESPONSE'\n  messageType: RoutingMessageType\n  messageName: RoutingMessageName\n  providers: PeerInfo[]\n  closer: PeerInfo[]\n  record?: RoutingRecord\n}\n\nexport interface RoutingFinalPeerEvent {\n  peer: PeerInfo\n  type: RoutingEventTypes.FINAL_PEER\n  name: 'FINAL_PEER'\n}\n\nexport interface RoutingQueryErrorEvent {\n  type: RoutingEventTypes.QUERY_ERROR\n  name: 'QUERY_ERROR'\n  error: Error\n}\n\nexport interface RoutingProviderEvent {\n  type: RoutingEventTypes.PROVIDER\n  name: 'PROVIDER'\n  providers: PeerInfo[]\n}\n\nexport interface RoutingValueEvent {\n  type: RoutingEventTypes.VALUE\n  name: 'VALUE'\n  value: Uint8Array\n}\n\nexport interface RoutingAddingPeerEvent {\n  type: RoutingEventTypes.ADDING_PEER\n  name: 'ADDING_PEER'\n  peer: PeerId\n}\n\nexport interface RoutingDialingPeerEvent {\n  peer: PeerId\n  type: RoutingEventTypes.DIALING_PEER\n  name: 'DIALING_PEER'\n}\n\nexport type RoutingQueryEvent = RoutingSendingQueryEvent | RoutingPeerResponseEvent | RoutingFinalPeerEvent | RoutingQueryErrorEvent | RoutingProviderEvent | RoutingValueEvent | RoutingAddingPeerEvent | RoutingDialingPeerEvent\n\nexport interface DHTAPI {\n  /**\n   * Find the closest peers to a given `PeerId` or `CID`, by querying the DHT.\n   */\n  query(peerId: PeerId | CID, options?: HTTPRPCOptions): AsyncIterable<RoutingQueryEvent>\n}\n\nexport function createDHT (client: HTTPRPCClient): DHTAPI {\n  return {\n    query: createQuery(client)\n  }\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,YAAY;AAMxC,WAAYC,iBASX;AATD,WAAYA,iBAAiB;EAC3BA,iBAAA,CAAAA,iBAAA,wCAAiB;EACjBA,iBAAA,CAAAA,iBAAA,wCAAa;EACbA,iBAAA,CAAAA,iBAAA,kCAAU;EACVA,iBAAA,CAAAA,iBAAA,oCAAW;EACXA,iBAAA,CAAAA,iBAAA,8BAAQ;EACRA,iBAAA,CAAAA,iBAAA,wBAAK;EACLA,iBAAA,CAAAA,iBAAA,oCAAW;EACXA,iBAAA,CAAAA,iBAAA,sCAAY;AACd,CAAC,EATWA,iBAAiB,KAAjBA,iBAAiB;AAW7B;;;AAGA,WAAYC,kBAOX;AAPD,WAAYA,kBAAkB;EAC5BA,kBAAA,CAAAA,kBAAA,gCAAa;EACbA,kBAAA,CAAAA,kBAAA,gCAAS;EACTA,kBAAA,CAAAA,kBAAA,sCAAY;EACZA,kBAAA,CAAAA,kBAAA,wCAAa;EACbA,kBAAA,CAAAA,kBAAA,gCAAS;EACTA,kBAAA,CAAAA,kBAAA,sBAAI;AACN,CAAC,EAPWA,kBAAkB,KAAlBA,kBAAkB;AA8E9B,OAAM,SAAUC,SAASA,CAAEC,MAAqB;EAC9C,OAAO;IACLC,KAAK,EAAEL,WAAW,CAACI,MAAM;GAC1B;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}