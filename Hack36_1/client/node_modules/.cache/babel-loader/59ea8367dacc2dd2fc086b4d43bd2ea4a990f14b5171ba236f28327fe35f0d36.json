{"ast":null,"code":"import { fetch, Response, Request, Headers } from '../fetch.js';\nimport { TimeoutError, AbortError } from './error.js';\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = async (url, options = {}) => {\n  const request = new XMLHttpRequest();\n  // eslint-disable-next-line @typescript-eslint/no-base-to-string\n  request.open(options.method ?? 'GET', url.toString(), true);\n  const {\n    timeout,\n    headers\n  } = options;\n  const t = Number(timeout);\n  if (!isNaN(t) && t > 0 && t < Infinity) {\n    request.timeout = t;\n  }\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType);\n  }\n  if (headers != null) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value);\n    }\n  }\n  if (options.signal != null) {\n    options.signal.onabort = () => {\n      request.abort();\n    };\n  }\n  if (options.onUploadProgress != null) {\n    request.upload.onprogress = options.onUploadProgress;\n  }\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer';\n  return new Promise((resolve, reject) => {\n    const handleEvent = event => {\n      switch (event.type) {\n        case 'error':\n          {\n            resolve(Response.error());\n            break;\n          }\n        case 'load':\n          {\n            resolve(new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            }));\n            break;\n          }\n        case 'timeout':\n          {\n            reject(new TimeoutError());\n            break;\n          }\n        case 'abort':\n          {\n            reject(new AbortError());\n            break;\n          }\n        default:\n          {\n            break;\n          }\n      }\n    };\n    request.onerror = handleEvent;\n    request.onload = handleEvent;\n    request.ontimeout = handleEvent;\n    request.onabort = handleEvent;\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body);\n  });\n};\nconst fetchWithStreaming = fetch;\nconst fetchWith = (url, options = {}) => options.onUploadProgress != null ? fetchWithProgress(url, options) : fetchWithStreaming(url, options);\n/**\n * Parse Headers from a XMLHttpRequest\n */\nconst parseHeaders = input => {\n  const headers = new Headers();\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ');\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1));\n    }\n  }\n  return headers;\n};\nclass ResponseWithURL extends Response {\n  constructor(url, body, options) {\n    super(body, options);\n    Object.defineProperty(this, 'url', {\n      value: url\n    });\n  }\n}\nexport { fetchWith as fetch };\nexport { Headers };\nexport { Request };","map":{"version":3,"names":["fetch","Response","Request","Headers","TimeoutError","AbortError","fetchWithProgress","url","options","request","XMLHttpRequest","open","method","toString","timeout","headers","t","Number","isNaN","Infinity","overrideMimeType","name","value","setRequestHeader","signal","onabort","abort","onUploadProgress","upload","onprogress","responseType","Promise","resolve","reject","handleEvent","event","type","error","ResponseWithURL","responseURL","response","status","statusText","parseHeaders","getAllResponseHeaders","onerror","onload","ontimeout","send","body","fetchWithStreaming","fetchWith","input","line","trim","split","index","indexOf","set","slice","constructor","Object","defineProperty"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/http/fetch.browser.ts"],"sourcesContent":["import { fetch, Response, Request, Headers } from '../fetch.js'\nimport { TimeoutError, AbortError } from './error.js'\nimport type { FetchOptions } from '../http.js'\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = async (url: string | Request, options: FetchOptions = {}): Promise<ResponseWithURL> => {\n  const request = new XMLHttpRequest()\n  // eslint-disable-next-line @typescript-eslint/no-base-to-string\n  request.open(options.method ?? 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n  const t = Number(timeout)\n\n  if (!isNaN(t) && t > 0 && t < Infinity) {\n    request.timeout = t\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers != null) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal != null) {\n    options.signal.onabort = () => {\n      request.abort()\n    }\n  }\n\n  if (options.onUploadProgress != null) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    const handleEvent = (event: Event): void => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\nconst fetchWith = (url: string | Request, options: FetchOptions = {}): any =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n */\nconst parseHeaders = (input: string): Headers => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  constructor (url: string, body: BodyInit, options: ResponseInit) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nexport { fetchWith as fetch }\nexport { Headers }\nexport { Request }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}