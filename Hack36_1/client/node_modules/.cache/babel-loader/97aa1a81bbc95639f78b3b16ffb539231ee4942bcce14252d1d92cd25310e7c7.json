{"ast":null,"code":"import { CodeError } from '@libp2p/interface';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport all from 'it-all';\nimport itPeekable from 'it-peekable';\nimport { isBytes, isBlob, isReadableStream } from './utils.js';\nexport async function normaliseContent(input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input]);\n  }\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()]);\n  }\n  // Blob | File\n  if (isBlob(input)) {\n    return input;\n  }\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    // @ts-expect-error cannot detect iterability\n    const peekable = itPeekable(input);\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    const {\n      value,\n      done\n    } = await peekable.peek();\n    if (done === true) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable);\n    }\n    peekable.push(value);\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      // @ts-expect-error cannot detect peekable generic type\n      // eslint-disable-next-line @typescript-eslint/await-thenable\n      return new Blob([Uint8Array.from(await all(peekable))]);\n    }\n    // (Async)Iterable<Bytes|String>\n    // @ts-expect-error value is never when instanceof String tested\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable);\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-base-to-string\n  throw new CodeError(`Unexpected input: ${input}`, 'ERR_UNEXPECTED_INPUT');\n}\nasync function itToBlob(stream) {\n  const parts = [];\n  for await (const chunk of stream) {\n    parts.push(chunk);\n  }\n  return new Blob(parts);\n}","map":{"version":3,"names":["CodeError","browserStreamToIt","all","itPeekable","isBytes","isBlob","isReadableStream","normaliseContent","input","Blob","String","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","itToBlob","push","Number","isInteger","Uint8Array","from","stream","parts","chunk"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/files/normalise-content.browser.ts"],"sourcesContent":["import { CodeError } from '@libp2p/interface'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport all from 'it-all'\nimport itPeekable from 'it-peekable'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js'\nimport type { ToContent } from '../../index.js'\n\nexport async function normaliseContent (input: ToContent): Promise<Blob> {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    // @ts-expect-error cannot detect iterability\n    const peekable = itPeekable(input)\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    const { value, done } = await peekable.peek()\n\n    if (done === true) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      // @ts-expect-error cannot detect peekable generic type\n      // eslint-disable-next-line @typescript-eslint/await-thenable\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    // @ts-expect-error value is never when instanceof String tested\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-base-to-string\n  throw new CodeError(`Unexpected input: ${input}`, 'ERR_UNEXPECTED_INPUT')\n}\n\nasync function itToBlob (stream: AsyncIterable<BlobPart> | Iterable<BlobPart>): Promise<Blob> {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,mBAAmB;AAC7C,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,UAAU,MAAM,aAAa;AACpC,SACEC,OAAO,EACPC,MAAM,EACNC,gBAAgB,QACX,YAAY;AAGnB,OAAO,eAAeC,gBAAgBA,CAAEC,KAAgB;EACtD;EACA,IAAIJ,OAAO,CAACI,KAAK,CAAC,EAAE;IAClB,OAAO,IAAIC,IAAI,CAAC,CAACD,KAAK,CAAC,CAAC;EAC1B;EAEA;EACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYE,MAAM,EAAE;IACxD,OAAO,IAAID,IAAI,CAAC,CAACD,KAAK,CAACG,QAAQ,EAAE,CAAC,CAAC;EACrC;EAEA;EACA,IAAIN,MAAM,CAACG,KAAK,CAAC,EAAE;IACjB,OAAOA,KAAK;EACd;EAEA;EACA,IAAIF,gBAAgB,CAACE,KAAK,CAAC,EAAE;IAC3BA,KAAK,GAAGP,iBAAiB,CAACO,KAAK,CAAC;EAClC;EAEA;EACA,IAAII,MAAM,CAACC,QAAQ,IAAIL,KAAK,IAAII,MAAM,CAACE,aAAa,IAAIN,KAAK,EAAE;IAC7D;IACA,MAAMO,QAAQ,GAAGZ,UAAU,CAACK,KAAK,CAAC;IAClC;IACA,MAAM;MAAEQ,KAAK;MAAEC;IAAI,CAAE,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAE7C,IAAID,IAAI,KAAK,IAAI,EAAE;MACjB;MACA,OAAOE,QAAQ,CAACJ,QAAQ,CAAC;IAC3B;IAEAA,QAAQ,CAACK,IAAI,CAACJ,KAAK,CAAC;IAEpB;IACA,IAAIK,MAAM,CAACC,SAAS,CAACN,KAAK,CAAC,EAAE;MAC3B;MACA;MACA,OAAO,IAAIP,IAAI,CAAC,CAACc,UAAU,CAACC,IAAI,CAAC,MAAMtB,GAAG,CAACa,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzD;IAEA;IACA;IACA,IAAIX,OAAO,CAACY,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYN,MAAM,EAAE;MAC1E,OAAOS,QAAQ,CAACJ,QAAQ,CAAC;IAC3B;EACF;EAEA;EACA,MAAM,IAAIf,SAAS,CAAC,qBAAqBQ,KAAK,EAAE,EAAE,sBAAsB,CAAC;AAC3E;AAEA,eAAeW,QAAQA,CAAEM,MAAoD;EAC3E,MAAMC,KAAK,GAAG,EAAE;EAEhB,WAAW,MAAMC,KAAK,IAAIF,MAAM,EAAE;IAChCC,KAAK,CAACN,IAAI,CAACO,KAAK,CAAC;EACnB;EAEA,OAAO,IAAIlB,IAAI,CAACiB,KAAK,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}