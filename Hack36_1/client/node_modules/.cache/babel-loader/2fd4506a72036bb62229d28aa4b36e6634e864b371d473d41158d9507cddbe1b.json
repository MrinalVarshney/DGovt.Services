{"ast":null,"code":"import errCode from 'err-code';\nimport first from 'it-first';\nimport last from 'it-last';\nimport { createGet as createBlockGet } from '../block/get.js';\nimport { resolve } from '../lib/resolve.js';\nexport function createGet(client, codecs) {\n  const getBlock = createBlockGet(client);\n  return async function get(cid, options = {}) {\n    if (options.path != null) {\n      const entry = options.localResolve === true ? await first(resolve(cid, options.path, codecs, getBlock, options)) : await last(resolve(cid, options.path, codecs, getBlock, options));\n      /** @type {import('../types').GetResult | undefined} - first and last will return undefined when empty */\n      const result = entry;\n      if (result == null) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n      }\n      return result;\n    }\n    const codec = await codecs.getCodec(cid.code);\n    const block = await getBlock(cid, options);\n    const node = codec.decode(block);\n    return {\n      value: node,\n      remainderPath: ''\n    };\n  };\n}","map":{"version":3,"names":["errCode","first","last","createGet","createBlockGet","resolve","client","codecs","getBlock","get","cid","options","path","entry","localResolve","result","Error","codec","getCodec","code","block","node","decode","value","remainderPath"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/dag/get.ts"],"sourcesContent":["import errCode from 'err-code'\nimport first from 'it-first'\nimport last from 'it-last'\nimport { createGet as createBlockGet } from '../block/get.js'\nimport { resolve } from '../lib/resolve.js'\nimport type { DAGAPI } from './index.js'\nimport type { Codecs } from '../index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport function createGet (client: HTTPRPCClient, codecs: Codecs): DAGAPI['get'] {\n  const getBlock = createBlockGet(client)\n\n  return async function get (cid, options = {}) {\n    if (options.path != null) {\n      const entry = options.localResolve === true\n        ? await first(resolve(cid, options.path, codecs, getBlock, options))\n        : await last(resolve(cid, options.path, codecs, getBlock, options))\n      /** @type {import('../types').GetResult | undefined} - first and last will return undefined when empty */\n      const result = (entry)\n\n      if (result == null) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n      }\n\n      return result\n    }\n\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n    const node = codec.decode(block)\n\n    return {\n      value: node,\n      remainderPath: ''\n    }\n  }\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,IAAI,MAAM,SAAS;AAC1B,SAASC,SAAS,IAAIC,cAAc,QAAQ,iBAAiB;AAC7D,SAASC,OAAO,QAAQ,mBAAmB;AAK3C,OAAM,SAAUF,SAASA,CAAEG,MAAqB,EAAEC,MAAc;EAC9D,MAAMC,QAAQ,GAAGJ,cAAc,CAACE,MAAM,CAAC;EAEvC,OAAO,eAAeG,GAAGA,CAAEC,GAAG,EAAEC,OAAO,GAAG,EAAE;IAC1C,IAAIA,OAAO,CAACC,IAAI,IAAI,IAAI,EAAE;MACxB,MAAMC,KAAK,GAAGF,OAAO,CAACG,YAAY,KAAK,IAAI,GACvC,MAAMb,KAAK,CAACI,OAAO,CAACK,GAAG,EAAEC,OAAO,CAACC,IAAI,EAAEL,MAAM,EAAEC,QAAQ,EAAEG,OAAO,CAAC,CAAC,GAClE,MAAMT,IAAI,CAACG,OAAO,CAACK,GAAG,EAAEC,OAAO,CAACC,IAAI,EAAEL,MAAM,EAAEC,QAAQ,EAAEG,OAAO,CAAC,CAAC;MACrE;MACA,MAAMI,MAAM,GAAIF,KAAM;MAEtB,IAAIE,MAAM,IAAI,IAAI,EAAE;QAClB,MAAMf,OAAO,CAAC,IAAIgB,KAAK,CAAC,WAAW,CAAC,EAAE,eAAe,CAAC;MACxD;MAEA,OAAOD,MAAM;IACf;IAEA,MAAME,KAAK,GAAG,MAAMV,MAAM,CAACW,QAAQ,CAACR,GAAG,CAACS,IAAI,CAAC;IAC7C,MAAMC,KAAK,GAAG,MAAMZ,QAAQ,CAACE,GAAG,EAAEC,OAAO,CAAC;IAC1C,MAAMU,IAAI,GAAGJ,KAAK,CAACK,MAAM,CAACF,KAAK,CAAC;IAEhC,OAAO;MACLG,KAAK,EAAEF,IAAI;MACXG,aAAa,EAAE;KAChB;EACH,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}