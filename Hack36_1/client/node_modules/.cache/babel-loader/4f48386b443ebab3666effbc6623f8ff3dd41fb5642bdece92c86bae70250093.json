{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport function createLs(client) {\n  return async function* ls(path, options = {}) {\n    if (path == null) {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n    const res = await client.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) != null ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries ?? []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result));\n      }\n    }\n  };\n}\nfunction toCoreInterface(entry) {\n  if (entry.hash != null) {\n    entry.cid = CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"names":["CID","objectToCamelWithMetadata","toUrlSearchParams","createLs","client","ls","path","options","Error","res","post","signal","searchParams","arg","asCID","long","stream","headers","result","ndjson","entry","Entries","toCoreInterface","hash","cid","parse","type"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/files/ls.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport type { FilesAPI } from './index.js'\nimport type { HTTPRPCClient } from '../lib/core.js'\n\nexport function createLs (client: HTTPRPCClient): FilesAPI['ls'] {\n  return async function * ls (path, options = {}) {\n    if (path == null) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await client.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: (CID.asCID(path) != null) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries ?? []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result))\n      }\n    }\n  }\n}\n\nfunction toCoreInterface (entry: any): any {\n  if (entry.hash != null) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,yBAAyB,QAAQ,yCAAyC;AACnF,SAASC,iBAAiB,QAAQ,gCAAgC;AAIlE,OAAM,SAAUC,QAAQA,CAAEC,MAAqB;EAC7C,OAAO,gBAAiBC,EAAEA,CAAEC,IAAI,EAAEC,OAAO,GAAG,EAAE;IAC5C,IAAID,IAAI,IAAI,IAAI,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;IAClD;IAEA,MAAMC,GAAG,GAAG,MAAML,MAAM,CAACM,IAAI,CAAC,UAAU,EAAE;MACxCC,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,YAAY,EAAEV,iBAAiB,CAAC;QAC9BW,GAAG,EAAGb,GAAG,CAACc,KAAK,CAACR,IAAI,CAAC,IAAI,IAAI,GAAI,SAASA,IAAI,EAAE,GAAGA,IAAI;QACvD;QACAS,IAAI,EAAE,IAAI;QACV,GAAGR,OAAO;QACVS,MAAM,EAAE;OACT,CAAC;MACFC,OAAO,EAAEV,OAAO,CAACU;KAClB,CAAC;IAEF,WAAW,MAAMC,MAAM,IAAIT,GAAG,CAACU,MAAM,EAAE,EAAE;MACvC;MACA,IAAI,SAAS,IAAID,MAAM,EAAE;QACvB,KAAK,MAAME,KAAK,IAAIF,MAAM,CAACG,OAAO,IAAI,EAAE,EAAE;UACxC,MAAMC,eAAe,CAACrB,yBAAyB,CAACmB,KAAK,CAAC,CAAC;QACzD;MACF,CAAC,MAAM;QACL,MAAME,eAAe,CAACrB,yBAAyB,CAACiB,MAAM,CAAC,CAAC;MAC1D;IACF;EACF,CAAC;AACH;AAEA,SAASI,eAAeA,CAAEF,KAAU;EAClC,IAAIA,KAAK,CAACG,IAAI,IAAI,IAAI,EAAE;IACtBH,KAAK,CAACI,GAAG,GAAGxB,GAAG,CAACyB,KAAK,CAACL,KAAK,CAACG,IAAI,CAAC;EACnC;EAEA,OAAOH,KAAK,CAACG,IAAI;EAEjBH,KAAK,CAACM,IAAI,GAAGN,KAAK,CAACM,IAAI,KAAK,CAAC,GAAG,WAAW,GAAG,MAAM;EAEpD,OAAON,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}