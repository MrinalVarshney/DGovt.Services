{"ast":null,"code":"import errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`\n */\nexport async function* resolve(cid, path, codecs, getBlock, options) {\n  const load = async cid => {\n    const codec = await codecs.getCodec(cid.code);\n    const block = await getBlock(cid, options);\n    return codec.decode(block);\n  };\n  const parts = path.split('/').filter(Boolean);\n  let value = await load(cid);\n  let lastCid = cid;\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length > 0) {\n    const key = parts.shift();\n    if (key == null) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH');\n    }\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key];\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      };\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK');\n    }\n    const cid = CID.asCID(value);\n    if (cid != null) {\n      lastCid = cid;\n      value = await load(value);\n    }\n  }\n  yield {\n    value,\n    remainderPath: ''\n  };\n}","map":{"version":3,"names":["errCode","CID","resolve","cid","path","codecs","getBlock","options","load","codec","getCodec","code","block","decode","parts","split","filter","Boolean","value","lastCid","length","key","shift","Error","Object","prototype","hasOwnProperty","call","remainderPath","join","asCID"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/resolve.ts"],"sourcesContent":["import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\nimport type { BlockAPI } from '../block/index.js'\nimport type { Codecs } from '../index.js'\nimport type { AbortOptions } from '@libp2p/interface'\n\nexport interface ResolveResult {\n  value: any\n  remainderPath?: string\n}\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`\n */\nexport async function * resolve (cid: CID, path: string, codecs: Codecs, getBlock: BlockAPI['get'], options?: AbortOptions): AsyncGenerator<ResolveResult> {\n  const load = async (cid: CID): Promise<any> => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length > 0) {\n    const key = parts.shift()\n\n    if (key == null) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    const cid = CID.asCID(value)\n\n    if (cid != null) {\n      lastCid = cid\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,SAASC,GAAG,QAAQ,kBAAkB;AAUtC;;;AAGA,OAAO,gBAAiBC,OAAOA,CAAEC,GAAQ,EAAEC,IAAY,EAAEC,MAAc,EAAEC,QAAyB,EAAEC,OAAsB;EACxH,MAAMC,IAAI,GAAG,MAAOL,GAAQ,IAAkB;IAC5C,MAAMM,KAAK,GAAG,MAAMJ,MAAM,CAACK,QAAQ,CAACP,GAAG,CAACQ,IAAI,CAAC;IAC7C,MAAMC,KAAK,GAAG,MAAMN,QAAQ,CAACH,GAAG,EAAEI,OAAO,CAAC;IAE1C,OAAOE,KAAK,CAACI,MAAM,CAACD,KAAK,CAAC;EAC5B,CAAC;EAED,MAAME,KAAK,GAAGV,IAAI,CAACW,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;EAC7C,IAAIC,KAAK,GAAG,MAAMV,IAAI,CAACL,GAAG,CAAC;EAC3B,IAAIgB,OAAO,GAAGhB,GAAG;EAEjB;EACA,OAAOW,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;IACvB,MAAMC,GAAG,GAAGP,KAAK,CAACQ,KAAK,EAAE;IAEzB,IAAID,GAAG,IAAI,IAAI,EAAE;MACf,MAAMrB,OAAO,CAAC,IAAIuB,KAAK,CAAC,2BAA2BnB,IAAI,GAAG,CAAC,EAAE,kBAAkB,CAAC;IAClF;IAEA,IAAIoB,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACT,KAAK,EAAEG,GAAG,CAAC,EAAE;MACpDH,KAAK,GAAGA,KAAK,CAACG,GAAG,CAAC;MAElB,MAAM;QACJH,KAAK;QACLU,aAAa,EAAEd,KAAK,CAACe,IAAI,CAAC,GAAG;OAC9B;IACH,CAAC,MAAM;MACL,MAAM7B,OAAO,CAAC,IAAIuB,KAAK,CAAC,kBAAkBF,GAAG,WAAWF,OAAO,EAAE,CAAC,EAAE,aAAa,CAAC;IACpF;IAEA,MAAMhB,GAAG,GAAGF,GAAG,CAAC6B,KAAK,CAACZ,KAAK,CAAC;IAE5B,IAAIf,GAAG,IAAI,IAAI,EAAE;MACfgB,OAAO,GAAGhB,GAAG;MACbe,KAAK,GAAG,MAAMV,IAAI,CAACU,KAAK,CAAC;IAC3B;EACF;EAEA,MAAM;IACJA,KAAK;IACLU,aAAa,EAAE;GAChB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}