{"ast":null,"code":"// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nimport { normaliseInput } from './files/normalise-input-multiple.browser.js';\nimport { modeToString } from './mode-to-string.js';\nexport async function multipartRequest(source, abortController, headers = {}, boundary) {\n  const parts = [];\n  const formData = new FormData();\n  let index = 0;\n  let total = 0;\n  for await (const {\n    content,\n    path,\n    mode,\n    mtime\n  } of normaliseInput(source)) {\n    let fileSuffix = '';\n    const type = content != null ? 'file' : 'dir';\n    if (index > 0) {\n      fileSuffix = `-${index}`;\n    }\n    let fieldName = type + fileSuffix;\n    const qs = [];\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`);\n    }\n    if (mtime != null) {\n      const {\n        secs,\n        nsecs\n      } = mtime;\n      qs.push(`mtime=${secs}`);\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`);\n      }\n    }\n    if (qs.length > 0) {\n      fieldName = `${fieldName}?${qs.join('&')}`;\n    }\n    if (content != null) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n      const end = total + content.size;\n      parts.push({\n        name: path,\n        start: total,\n        end\n      });\n      total = end;\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), {\n        type: 'application/x-directory'\n      }));\n    } else {\n      throw new Error('path or content or both must be set');\n    }\n    index++;\n  }\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  };\n}","map":{"version":3,"names":["normaliseInput","modeToString","multipartRequest","source","abortController","headers","boundary","parts","formData","FormData","index","total","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","File","Error","body"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/multipart-request.browser.ts"],"sourcesContent":["// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nimport { normaliseInput } from './files/normalise-input-multiple.browser.js'\nimport { modeToString } from './mode-to-string.js'\nimport type { MultipartRequest } from './multipart-request.js'\nimport type { ImportCandidateStream } from '../index.js'\n\nexport async function multipartRequest (source: ImportCandidateStream, abortController: AbortController, headers: Headers | Record<string, string> = {}, boundary?: string): Promise<MultipartRequest> {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content != null ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length > 0) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content != null) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined)\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    } else {\n      throw new Error('path or content or both must be set')\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,cAAc,QAAQ,6CAA6C;AAC5E,SAASC,YAAY,QAAQ,qBAAqB;AAIlD,OAAO,eAAeC,gBAAgBA,CAAEC,MAA6B,EAAEC,eAAgC,EAAEC,OAAA,GAA4C,EAAE,EAAEC,QAAiB;EACxK,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;EAC/B,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,CAAC;EAEb,WAAW,MAAM;IAAEC,OAAO;IAAEC,IAAI;IAAEC,IAAI;IAAEC;EAAK,CAAE,IAAIf,cAAc,CAACG,MAAM,CAAC,EAAE;IACzE,IAAIa,UAAU,GAAG,EAAE;IACnB,MAAMC,IAAI,GAAGL,OAAO,IAAI,IAAI,GAAG,MAAM,GAAG,KAAK;IAE7C,IAAIF,KAAK,GAAG,CAAC,EAAE;MACbM,UAAU,GAAG,IAAIN,KAAK,EAAE;IAC1B;IAEA,IAAIQ,SAAS,GAAGD,IAAI,GAAGD,UAAU;IACjC,MAAMG,EAAE,GAAG,EAAE;IAEb,IAAIL,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKM,SAAS,EAAE;MACvCD,EAAE,CAACE,IAAI,CAAC,QAAQpB,YAAY,CAACa,IAAI,CAAC,EAAE,CAAC;IACvC;IAEA,IAAKC,KAAK,IAAK,IAAI,EAAE;MACnB,MAAM;QAAEO,IAAI;QAAEC;MAAK,CAAE,GAAIR,KAAM;MAE/BI,EAAE,CAACE,IAAI,CAAC,SAASC,IAAI,EAAE,CAAC;MAExB,IAAIC,KAAK,IAAI,IAAI,EAAE;QACjBJ,EAAE,CAACE,IAAI,CAAC,eAAeE,KAAK,EAAE,CAAC;MACjC;IACF;IAEA,IAAIJ,EAAE,CAACK,MAAM,GAAG,CAAC,EAAE;MACjBN,SAAS,GAAG,GAAGA,SAAS,IAAIC,EAAE,CAACM,IAAI,CAAC,GAAG,CAAC,EAAE;IAC5C;IAEA,IAAIb,OAAO,IAAI,IAAI,EAAE;MACnBJ,QAAQ,CAACkB,GAAG,CAACR,SAAS,EAAEN,OAAO,EAAEC,IAAI,IAAI,IAAI,GAAGc,kBAAkB,CAACd,IAAI,CAAC,GAAGO,SAAS,CAAC;MACrF,MAAMQ,GAAG,GAAGjB,KAAK,GAAGC,OAAO,CAACiB,IAAI;MAChCtB,KAAK,CAACc,IAAI,CAAC;QAAES,IAAI,EAAEjB,IAAI;QAAEkB,KAAK,EAAEpB,KAAK;QAAEiB;MAAG,CAAE,CAAC;MAC7CjB,KAAK,GAAGiB,GAAG;IACb,CAAC,MAAM,IAAIf,IAAI,IAAI,IAAI,EAAE;MACvBL,QAAQ,CAACkB,GAAG,CAACR,SAAS,EAAE,IAAIc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAEL,kBAAkB,CAACd,IAAI,CAAC,EAAE;QAAEI,IAAI,EAAE;MAAyB,CAAE,CAAC,CAAC;IACxG,CAAC,MAAM;MACL,MAAM,IAAIgB,KAAK,CAAC,qCAAqC,CAAC;IACxD;IAEAvB,KAAK,EAAE;EACT;EAEA,OAAO;IACLC,KAAK;IACLJ,KAAK;IACLF,OAAO;IACP6B,IAAI,EAAE1B;GACP;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}