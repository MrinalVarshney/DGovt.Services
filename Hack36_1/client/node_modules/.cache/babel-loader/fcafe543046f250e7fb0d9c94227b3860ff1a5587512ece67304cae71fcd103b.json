{"ast":null,"code":"import { parseMtime } from '../lib/files/utils.js';\nimport { modeToString } from './mode-to-string.js';\nexport function toUrlSearchParams({\n  arg,\n  searchParams,\n  hashAlg,\n  mtime,\n  mode,\n  ...options\n} = {}) {\n  if (searchParams != null) {\n    options = {\n      ...options,\n      ...searchParams\n    };\n  }\n  if (hashAlg != null) {\n    options.hash = hashAlg;\n  }\n  if (mtime != null) {\n    mtime = parseMtime(mtime);\n    options.mtime = mtime.secs;\n    options.mtimeNsecs = mtime.nsecs;\n  }\n  if (mode != null) {\n    options.mode = modeToString(mode);\n  }\n  if (!isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`;\n  }\n  if (arg === undefined || arg === null) {\n    arg = [];\n  } else if (!Array.isArray(arg)) {\n    arg = [arg];\n  }\n  const urlSearchParams = new URLSearchParams(options);\n  arg.forEach(arg => {\n    urlSearchParams.append('arg', arg);\n  });\n  return urlSearchParams;\n}","map":{"version":3,"names":["parseMtime","modeToString","toUrlSearchParams","arg","searchParams","hashAlg","mtime","mode","options","hash","secs","mtimeNsecs","nsecs","isNaN","timeout","undefined","Array","isArray","urlSearchParams","URLSearchParams","forEach","append"],"sources":["/home/lokesh/Desktop/DGovt.Services/Hack36_1/client/node_modules/kubo-rpc-client/src/lib/to-url-search-params.ts"],"sourcesContent":["import { parseMtime } from '../lib/files/utils.js'\nimport { modeToString } from './mode-to-string.js'\n\nexport function toUrlSearchParams ({ arg, searchParams, hashAlg, mtime, mode, ...options }: any = {}): URLSearchParams {\n  if (searchParams != null) {\n    options = {\n      ...options,\n      ...searchParams\n    }\n  }\n\n  if (hashAlg != null) {\n    options.hash = hashAlg\n  }\n\n  if (mtime != null) {\n    mtime = parseMtime(mtime)\n\n    options.mtime = mtime.secs\n    options.mtimeNsecs = mtime.nsecs\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode)\n  }\n\n  if (!isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = []\n  } else if (!Array.isArray(arg)) {\n    arg = [arg]\n  }\n\n  const urlSearchParams = new URLSearchParams(options)\n\n  arg.forEach((arg: any) => {\n    urlSearchParams.append('arg', arg)\n  })\n\n  return urlSearchParams\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,uBAAuB;AAClD,SAASC,YAAY,QAAQ,qBAAqB;AAElD,OAAM,SAAUC,iBAAiBA,CAAE;EAAEC,GAAG;EAAEC,YAAY;EAAEC,OAAO;EAAEC,KAAK;EAAEC,IAAI;EAAE,GAAGC;AAAO,IAAU,EAAE;EAClG,IAAIJ,YAAY,IAAI,IAAI,EAAE;IACxBI,OAAO,GAAG;MACR,GAAGA,OAAO;MACV,GAAGJ;KACJ;EACH;EAEA,IAAIC,OAAO,IAAI,IAAI,EAAE;IACnBG,OAAO,CAACC,IAAI,GAAGJ,OAAO;EACxB;EAEA,IAAIC,KAAK,IAAI,IAAI,EAAE;IACjBA,KAAK,GAAGN,UAAU,CAACM,KAAK,CAAC;IAEzBE,OAAO,CAACF,KAAK,GAAGA,KAAK,CAACI,IAAI;IAC1BF,OAAO,CAACG,UAAU,GAAGL,KAAK,CAACM,KAAK;EAClC;EAEA,IAAIL,IAAI,IAAI,IAAI,EAAE;IAChBC,OAAO,CAACD,IAAI,GAAGN,YAAY,CAACM,IAAI,CAAC;EACnC;EAEA,IAAI,CAACM,KAAK,CAACL,OAAO,CAACM,OAAO,CAAC,EAAE;IAC3B;IACAN,OAAO,CAACM,OAAO,GAAG,GAAGN,OAAO,CAACM,OAAO,IAAI;EAC1C;EAEA,IAAIX,GAAG,KAAKY,SAAS,IAAIZ,GAAG,KAAK,IAAI,EAAE;IACrCA,GAAG,GAAG,EAAE;EACV,CAAC,MAAM,IAAI,CAACa,KAAK,CAACC,OAAO,CAACd,GAAG,CAAC,EAAE;IAC9BA,GAAG,GAAG,CAACA,GAAG,CAAC;EACb;EAEA,MAAMe,eAAe,GAAG,IAAIC,eAAe,CAACX,OAAO,CAAC;EAEpDL,GAAG,CAACiB,OAAO,CAAEjB,GAAQ,IAAI;IACvBe,eAAe,CAACG,MAAM,CAAC,KAAK,EAAElB,GAAG,CAAC;EACpC,CAAC,CAAC;EAEF,OAAOe,eAAe;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}